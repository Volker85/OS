ARM GAS  C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"os_main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.p2align 2,,3
  17              		.global	OS_STATE_HANDLER
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	OS_STATE_HANDLER:
  24              	.LFB1:
  25              		.file 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_main.c"
   1:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** #include "os_firstinc.h"
   2:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** #include "os_task_common.h"
   3:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** #include "os_task_scheduler.h"
   4:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** #include "OS_shutdown.h"
   5:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** #include "os_start_init_mc.h"
   6:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** #include "os_start_init_hw.h"
   7:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** #include "os_start_init_sw.h"
   8:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** #include "os_task_scheduler.h"
   9:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** #include "os_task_queue.h"
  10:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** #include "os_main.h"
  11:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  12:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** /*
  13:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** OS_State: OS_INIT (Start im Supervisor Mode)
  14:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - Exception Handler aufsetzen  -> Done
  15:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - HW Internal Peripherie, RAM, etc -> Done
  16:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - Tasks konfigurieren -> Done via OS_INIT_TASK_SYSTEM()
  17:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** --> Stack -> assigned in function OS_INIT_TASKs / OS_INIT_TASK_SYSTEM -> Done
  18:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** --> MMU_REGION ->NA
  19:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** --> CoreId -> Done
  20:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** --> Task-Function -> assigned in function OS_INIT_TASK / OS_INIT_TASK_SYSTEM -> Done
  21:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** --> TaskPrio -> Done
  22:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** --> MultipleActChk -> Done in OS_ACTIVATE_TASK()
  23:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** --> Privilige Level (Handler mode (priviliged): System Mode, Abort, Undefined, FiQ, IRQ; Thread mod
  24:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - TCMP Interrupts für Tasks konfigurieren, Starten vom Dispatcher -> Done
  25:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - MMU konfigurieren -> NA
  26:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - TaskScheduler für Core 0...n starten (jeder Core hat eigenen Scheduler) -> Not needed for CortexM
  27:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - SW mit erhöhtem Rechtebedarf wird mittels Interrupt gestartet (Dispatcher, WD, FMON, Shutdown) ->
  28:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - FMON / Watchdog aktivieren -> NA
  29:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - Interrupts aktivieren -> Done
  30:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - Zu UserMode wechseln -> Done
  31:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  32:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** OS_State: OS_Running (User Mode)
  33:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - Starten / Beenden der einzelnen Tasks auf den jeweiligen Cores(User/Supervisor Mode??) -> Done
ARM GAS  C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s 			page 2


  34:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - Timer Compare Interrupts -> not needed  -> Systick used instead
  35:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - Interrupt Prioritäten von Cat2.(SW) Interrupts und Cat1.(HW) Interrupts -> NA
  36:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  37:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** (OS_State: OS_Exception (Supervisor Mode))
  38:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - Link-Register Adresse im Eeprom abspeichern, an der die Exceptioin erzeugt wurde -> NA (no EEPROM
  39:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - OS_SHUTDOWN mit Reset -> Done in handler functions via call of "OS_SHUTDOWN(E_OS_RESET_HARDRESET)
  40:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  41:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** OS_State: OS_SHUTDOWN (nur erlaubt im Supervisor Mode)
  42:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - Interrupts deaktivieren -> Done
  43:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - Tasks beenden (Timer Interrupts löschen) -> Done OS_SHUTDOWN(E_OS_RESET_HARDRESET
  44:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - FMON / Watchdog deinitialisieren -> NA
  45:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - MMU deaktivieren / deintialisieren -> NA
  46:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** - HW Reset auslösen -> Done
  47:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  48:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** */
  49:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  50:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** LOCAL void os_determine_next_task_activation(void)
  51:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** {
  52:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    LOCAL uint32 call_nr = 0u;
  53:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    switch(call_nr)
  54:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    {
  55:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    case 0u:
  56:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_ACTIVATE_TASK(&TASK_1_VAR);
  57:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       call_nr++;
  58:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
  59:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    case 1u:
  60:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  61:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       call_nr++;
  62:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
  63:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    case 2u:
  64:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_ACTIVATE_TASK(&TASK_2_VAR);
  65:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       call_nr++;
  66:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
  67:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    case 3u:
  68:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  69:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       call_nr++;
  70:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
  71:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    case 4u:
  72:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_ACTIVATE_TASK(&TASK_3_VAR);
  73:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       call_nr = 0u;
  74:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
  75:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    default:
  76:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
  77:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  78:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    }
  79:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    /*TODO: mehrere unterschiedliche Tasks mit Ansteuerung der LEDs bauen, sodass die korrekte zeitl
  80:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  81:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** }
  82:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  83:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** void OS_STATE_HANDLER(void)
  84:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** {
  26              		.loc 1 84 0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  85:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    /* the following code runs in priviliged mode!! */
ARM GAS  C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s 			page 3


  86:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    LOCAL os_reset_type_t sys_req_reset_state = E_OS_RESET_POWERDOWN;
  87:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    LOCAL uint32 call_nr = 0u;
  88:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  89:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    switch(OS_STATE)
  31              		.loc 1 89 0
  32 0000 3A4D     		ldr	r5, .L23
  84:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    /* the following code runs in priviliged mode!! */
  33              		.loc 1 84 0
  34 0002 08B5     		push	{r3, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
  38              		.loc 1 89 0
  39 0004 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
  40 0006 DBB2     		uxtb	r3, r3
  41 0008 012B     		cmp	r3, #1
  42 000a 26D0     		beq	.L3
  43 000c 10D3     		bcc	.L4
  44 000e 022B     		cmp	r3, #2
  45 0010 0BD1     		bne	.L2
  90:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    {
  91:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    case OS_STATE_INIT:
  92:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    {
  93:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /*init the MCU including MMU, RAM, Registers */
  94:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_INIT_MC();
  95:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /* start the task system */
  96:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /* initialisation of SW, HW will be done in the tasks, after starting the task system.... */
  97:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_INIT_HW();
  98:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_INIT_SW();
  99:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
 100:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /* trigger dispatcher */
 101:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /* activate the dispatcher, configure TCMP interrupts for tasks */
 102:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /* activate & start the Idle task */
 103:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_ACTIVATE_TASK(&TASK_0_VAR);
 104:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_START_TASK(GET_IDLE_TASK(),0u);
 105:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_ACTIVATE_DISPATCHER();
 106:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
 107:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_STATE = OS_STATE_RUNNING;
 108:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /* activate the interrupts, tasks will be executed from now on ... */
 109:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       LLF_INT_ENABLE();
 110:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
 111:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    }
 112:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    case OS_STATE_RUNNING:
 113:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    {
 114:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /*
 115:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       TODO: os_determine_next_task_activation und OS_TASK_DISPATCHER müssen m.E. öfters laufen wie 
 116:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       Es macht keinen Sinn, immer den State Handler anzufragen, nur um das Task Handling zu trigger
 117:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       - Der Dispatcher müsste per Interrupt die laufende Task unterbrechen um dann (nach PreemptTas
 118:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       - Der os_determine_next_task_activation müsste vor jedem Aufruf on OS_TASK_DISPATCHER laufen
 119:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       */
 120:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       if(call_nr % 5u == 0u)
 121:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       {
 122:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          os_determine_next_task_activation();
 123:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 124:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       call_nr++;
 125:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /* run the task function */
 126:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_TASK_DISPATCHER();
ARM GAS  C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s 			page 4


 127:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       if(SYSTEM_STATE_ACCEPTED == OS_STATE_SHUTDOWN) /* check for shutdown/reset/exit conditions: c
 128:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       {
 129:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          OS_STATE = OS_STATE_SHUTDOWN;
 130:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          sys_req_reset_state = E_OS_RESET_HARDRESET;
 131:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 132:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
 133:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    }
 134:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    case OS_STATE_SHUTDOWN:
 135:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    {
 136:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       LLF_INT_DISABLE();
  46              		.loc 1 136 0
  47 0012 FFF7FEFF 		bl	LLF_INT_DISABLE
  48              	.LVL0:
 137:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       switch(sys_req_reset_state)
  49              		.loc 1 137 0
  50 0016 364B     		ldr	r3, .L23+4
  51 0018 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  52 001a 0128     		cmp	r0, #1
  53 001c 02D0     		beq	.L16
  54 001e 3DD3     		bcc	.L15
  55 0020 0228     		cmp	r0, #2
  56 0022 32D1     		bne	.L21
  57              	.L16:
 138:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       {
 139:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       case E_OS_RESET_POWERDOWN:
 140:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       {
 141:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          OS_SHUTDOWN(E_OS_RESET_POWERDOWN,0u);
 142:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          break;
 143:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 144:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       case E_OS_RESET_HARDRESET:
 145:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       {
 146:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          OS_SHUTDOWN(E_OS_RESET_HARDRESET,0u);
 147:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          break;
 148:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 149:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       case E_OS_RESET_EXIT:
 150:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       {
 151:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          OS_SHUTDOWN(E_OS_RESET_EXIT,0u);
  58              		.loc 1 151 0
  59 0024 0021     		movs	r1, #0
  60 0026 FFF7FEFF 		bl	OS_SHUTDOWN
  61              	.LVL1:
  62              	.L2:
 152:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          break;
 153:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 154:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       default:
 155:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       {
 156:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          OS_SHUTDOWN(E_OS_RESET_HARDRESET,0u);
 157:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          OS_SET_SW_BUG(E_OS_BUG_RESET_EXIT_OR_SHUTDOWN_FAILED,E_FUNC_STATE_HANDLER);
 158:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          break;
 159:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 160:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 161:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
 162:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    }
 163:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    default:
 164:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    {
 165:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
 166:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    }
ARM GAS  C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s 			page 5


 167:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    }
 168:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    /*check the complete stack apart from the first 64 bytes to detect critical stack usage */
 169:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    OS_STACK_CHECK();
  63              		.loc 1 169 0
  64 002a FFF7FEFF 		bl	OS_STACK_CHECK
  65              	.LVL2:
  66              	.L17:
  67 002e FEE7     		b	.L17
  68              	.L4:
  94:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /* start the task system */
  69              		.loc 1 94 0
  70 0030 FFF7FEFF 		bl	OS_INIT_MC
  71              	.LVL3:
  97:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_INIT_SW();
  72              		.loc 1 97 0
  73 0034 FFF7FEFF 		bl	OS_INIT_HW
  74              	.LVL4:
  98:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  75              		.loc 1 98 0
  76 0038 FFF7FEFF 		bl	OS_INIT_SW
  77              	.LVL5:
 103:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_START_TASK(GET_IDLE_TASK(),0u);
  78              		.loc 1 103 0
  79 003c 2D48     		ldr	r0, .L23+8
  80 003e FFF7FEFF 		bl	OS_ACTIVATE_TASK
  81              	.LVL6:
 104:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       OS_ACTIVATE_DISPATCHER();
  82              		.loc 1 104 0
  83 0042 FFF7FEFF 		bl	GET_IDLE_TASK
  84              	.LVL7:
  85 0046 0021     		movs	r1, #0
  86 0048 FFF7FEFF 		bl	OS_START_TASK
  87              	.LVL8:
 105:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c **** 
  88              		.loc 1 105 0
  89 004c FFF7FEFF 		bl	OS_ACTIVATE_DISPATCHER
  90              	.LVL9:
 107:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /* activate the interrupts, tasks will be executed from now on ... */
  91              		.loc 1 107 0
  92 0050 0123     		movs	r3, #1
  93 0052 2B70     		strb	r3, [r5]
 109:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
  94              		.loc 1 109 0
  95 0054 FFF7FEFF 		bl	LLF_INT_ENABLE
  96              	.LVL10:
 110:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    }
  97              		.loc 1 110 0
  98 0058 E7E7     		b	.L2
  99              	.L3:
 120:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       {
 100              		.loc 1 120 0
 101 005a 274C     		ldr	r4, .L23+12
 102 005c 2268     		ldr	r2, [r4]
 103 005e 0523     		movs	r3, #5
 104 0060 B2FBF3F3 		udiv	r3, r2, r3
 105 0064 03EB8303 		add	r3, r3, r3, lsl #2
 106 0068 9A42     		cmp	r2, r3
ARM GAS  C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s 			page 6


 107 006a 1CD0     		beq	.L22
 108              	.L6:
 124:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       /* run the task function */
 109              		.loc 1 124 0
 110 006c 2368     		ldr	r3, [r4]
 111 006e 0133     		adds	r3, r3, #1
 112 0070 2360     		str	r3, [r4]
 126:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       if(SYSTEM_STATE_ACCEPTED == OS_STATE_SHUTDOWN) /* check for shutdown/reset/exit conditions: c
 113              		.loc 1 126 0
 114 0072 FFF7FEFF 		bl	OS_TASK_DISPATCHER
 115              	.LVL11:
 127:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       {
 116              		.loc 1 127 0
 117 0076 214B     		ldr	r3, .L23+16
 118 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 119 007a DBB2     		uxtb	r3, r3
 120 007c 022B     		cmp	r3, #2
 121 007e D4D1     		bne	.L2
 130:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 122              		.loc 1 130 0
 123 0080 1B4A     		ldr	r2, .L23+4
 129:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          sys_req_reset_state = E_OS_RESET_HARDRESET;
 124              		.loc 1 129 0
 125 0082 2B70     		strb	r3, [r5]
 130:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 126              		.loc 1 130 0
 127 0084 0023     		movs	r3, #0
 128 0086 1370     		strb	r3, [r2]
 129 0088 CFE7     		b	.L2
 130              	.L21:
 156:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          OS_SET_SW_BUG(E_OS_BUG_RESET_EXIT_OR_SHUTDOWN_FAILED,E_FUNC_STATE_HANDLER);
 131              		.loc 1 156 0
 132 008a 0021     		movs	r1, #0
 133 008c 0846     		mov	r0, r1
 134 008e FFF7FEFF 		bl	OS_SHUTDOWN
 135              	.LVL12:
 157:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          break;
 136              		.loc 1 157 0
 137 0092 1321     		movs	r1, #19
 138 0094 0820     		movs	r0, #8
 139 0096 FFF7FEFF 		bl	OS_SET_SW_BUG
 140              	.LVL13:
 158:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 141              		.loc 1 158 0
 142 009a C6E7     		b	.L2
 143              	.L15:
 146:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****          break;
 144              		.loc 1 146 0
 145 009c 0021     		movs	r1, #0
 146 009e 0846     		mov	r0, r1
 147 00a0 FFF7FEFF 		bl	OS_SHUTDOWN
 148              	.LVL14:
 147:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       }
 149              		.loc 1 147 0
 150 00a4 C1E7     		b	.L2
 151              	.L22:
 152              	.LBB4:
ARM GAS  C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s 			page 7


 153              	.LBB5:
  53:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****    {
 154              		.loc 1 53 0
 155 00a6 6368     		ldr	r3, [r4, #4]
 156 00a8 042B     		cmp	r3, #4
 157 00aa DFD8     		bhi	.L6
 158 00ac DFE803F0 		tbb	[pc, r3]
 159              	.L8:
 160 00b0 03       		.byte	(.L7-.L8)/2
 161 00b1 1A       		.byte	(.L9-.L8)/2
 162 00b2 13       		.byte	(.L10-.L8)/2
 163 00b3 10       		.byte	(.L11-.L8)/2
 164 00b4 0A       		.byte	(.L12-.L8)/2
 165 00b5 00       		.p2align 1
 166              	.L7:
  56:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       call_nr++;
 167              		.loc 1 56 0
 168 00b6 1248     		ldr	r0, .L23+20
 169 00b8 FFF7FEFF 		bl	OS_ACTIVATE_TASK
 170              	.LVL15:
  57:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
 171              		.loc 1 57 0
 172 00bc 6368     		ldr	r3, [r4, #4]
 173 00be 0133     		adds	r3, r3, #1
 174 00c0 6360     		str	r3, [r4, #4]
 175 00c2 D3E7     		b	.L6
 176              	.L12:
  72:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       call_nr = 0u;
 177              		.loc 1 72 0
 178 00c4 0F48     		ldr	r0, .L23+24
 179 00c6 FFF7FEFF 		bl	OS_ACTIVATE_TASK
 180              	.LVL16:
  73:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
 181              		.loc 1 73 0
 182 00ca 0023     		movs	r3, #0
 183 00cc 6360     		str	r3, [r4, #4]
 184 00ce CDE7     		b	.L6
 185              	.L11:
  69:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
 186              		.loc 1 69 0
 187 00d0 0423     		movs	r3, #4
 188 00d2 6360     		str	r3, [r4, #4]
 189 00d4 CAE7     		b	.L6
 190              	.L10:
  64:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       call_nr++;
 191              		.loc 1 64 0
 192 00d6 0C48     		ldr	r0, .L23+28
 193 00d8 FFF7FEFF 		bl	OS_ACTIVATE_TASK
 194              	.LVL17:
  65:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
 195              		.loc 1 65 0
 196 00dc 6368     		ldr	r3, [r4, #4]
 197 00de 0133     		adds	r3, r3, #1
 198 00e0 6360     		str	r3, [r4, #4]
 199 00e2 C3E7     		b	.L6
 200              	.L9:
  61:E:\NeuOrga\Programmieren\c_cpp\github_os\input\src\os_base\os_main.c ****       break;
ARM GAS  C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s 			page 8


 201              		.loc 1 61 0
 202 00e4 0223     		movs	r3, #2
 203 00e6 6360     		str	r3, [r4, #4]
 204 00e8 C0E7     		b	.L6
 205              	.L24:
 206 00ea 00BF     		.align	2
 207              	.L23:
 208 00ec 00000000 		.word	OS_STATE
 209 00f0 00000000 		.word	.LANCHOR1
 210 00f4 00000000 		.word	TASK_0_VAR
 211 00f8 00000000 		.word	.LANCHOR0
 212 00fc 00000000 		.word	SYSTEM_STATE_ACCEPTED
 213 0100 00000000 		.word	TASK_1_VAR
 214 0104 00000000 		.word	TASK_3_VAR
 215 0108 00000000 		.word	TASK_2_VAR
 216              	.LBE5:
 217              	.LBE4:
 218              		.cfi_endproc
 219              	.LFE1:
 221              		.data
 222              		.set	.LANCHOR1,. + 0
 225              	sys_req_reset_state.4142:
 226 0000 01       		.byte	1
 227              		.bss
 228              		.align	2
 229              		.set	.LANCHOR0,. + 0
 232              	call_nr.4143:
 233 0000 00000000 		.space	4
 236              	call_nr.4131:
 237 0004 00000000 		.space	4
 238              		.text
 239              	.Letext0:
 240              		.file 2 "e:\\neuorga\\programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_base_types.h"
 241              		.file 3 "e:\\neuorga\\programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_common.h"
 242              		.file 4 "e:\\neuorga\\programmieren\\c_cpp\\github_os\\input\\src\\os_drivers\\lld_core.h"
 243              		.file 5 "e:\\neuorga\\programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_common.h"
 244              		.file 6 "e:\\neuorga\\programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_main.h"
 245              		.file 7 "e:\\neuorga\\programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_ram.h"
 246              		.file 8 "e:\\neuorga\\programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_ram_stack.h"
 247              		.file 9 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\OS_shutdown.h"
 248              		.file 10 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_scheduler.h"
 249              		.file 11 "e:\\neuorga\\programmieren\\c_cpp\\github_os\\input\\src\\os_drivers\\lld_global.h"
 250              		.file 12 "e:\\neuorga\\programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_stack.h"
 251              		.file 13 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_start_init_mc.h"
 252              		.file 14 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_start_init_hw.h"
 253              		.file 15 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_start_init_sw.h"
 254              		.file 16 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.h"
ARM GAS  C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 os_main.c
C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s:15     .text:00000000 $t
C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s:23     .text:00000000 OS_STATE_HANDLER
C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s:160    .text:000000b0 $d
C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s:208    .text:000000ec $d
C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s:225    .data:00000000 sys_req_reset_state.4142
C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s:228    .bss:00000000 $d
C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s:232    .bss:00000000 call_nr.4143
C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s:236    .bss:00000004 call_nr.4131
C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s:165    .text:000000b5 $d
C:\Users\PRESID~1\AppData\Local\Temp\ccTs3RWm.s:165    .text:000000b6 $t
                           .group:00000000 wm4.0.d67ddeb5d3f434a0386bf4e126239e16
                           .group:00000000 wm4.os_config.h.2.ac4658f92c1259d8f1114145439d5f31
                           .group:00000000 wm4.os_common.h.2.63eb68e412d9b6f465f2fde7f2fcb855
                           .group:00000000 wm4.os_task_config.h.2.89b082d5aa4d7b2eff2ad4d1eb9bfd97
                           .group:00000000 wm4.os_task_common.h.95.8d8bf4690dc541f58a865736bc15fd8a
                           .group:00000000 wm4.os_task_scheduler.h.2.15617e18d7400fa01024e50e30c98462
                           .group:00000000 wm4.os_task_queue.h.2.322205b6bc95ffadb60992ab4fdadeef

UNDEFINED SYMBOLS
LLF_INT_DISABLE
OS_SHUTDOWN
OS_STACK_CHECK
OS_INIT_MC
OS_INIT_HW
OS_INIT_SW
OS_ACTIVATE_TASK
GET_IDLE_TASK
OS_START_TASK
OS_ACTIVATE_DISPATCHER
LLF_INT_ENABLE
OS_TASK_DISPATCHER
OS_SET_SW_BUG
OS_STATE
TASK_0_VAR
SYSTEM_STATE_ACCEPTED
TASK_1_VAR
TASK_3_VAR
TASK_2_VAR
