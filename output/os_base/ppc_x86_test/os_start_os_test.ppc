# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_start_os_test.c"
# 1 "D:\\Programm\\MinGW\\bin//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 4
#define __GNUC_MINOR__ 9
#define __GNUC_PATCHLEVEL__ 3
#define __VERSION__ "4.9.3"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 12
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ short unsigned int
#define __WINT_TYPE__ short unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST16_TYPE__ short int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_FAST16_TYPE__ short unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_ABI_VERSION 1002
#define __SCHAR_MAX__ 127
#define __SHRT_MAX__ 32767
#define __INT_MAX__ 2147483647
#define __LONG_MAX__ 2147483647L
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __WCHAR_MAX__ 65535
#define __WCHAR_MIN__ 0
#define __WINT_MAX__ 65535
#define __WINT_MIN__ 0
#define __PTRDIFF_MAX__ 2147483647
#define __SIZE_MAX__ 4294967295U
#define __INTMAX_MAX__ 9223372036854775807LL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 18446744073709551615ULL
#define __UINTMAX_C(c) c ## ULL
#define __SIG_ATOMIC_MAX__ 2147483647
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __INT8_MAX__ 127
#define __INT16_MAX__ 32767
#define __INT32_MAX__ 2147483647
#define __INT64_MAX__ 9223372036854775807LL
#define __UINT8_MAX__ 255
#define __UINT16_MAX__ 65535
#define __UINT32_MAX__ 4294967295U
#define __UINT64_MAX__ 18446744073709551615ULL
#define __INT_LEAST8_MAX__ 127
#define __INT8_C(c) c
#define __INT_LEAST16_MAX__ 32767
#define __INT16_C(c) c
#define __INT_LEAST32_MAX__ 2147483647
#define __INT32_C(c) c
#define __INT_LEAST64_MAX__ 9223372036854775807LL
#define __INT64_C(c) c ## LL
#define __UINT_LEAST8_MAX__ 255
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 65535
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 4294967295U
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 18446744073709551615ULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 127
#define __INT_FAST16_MAX__ 32767
#define __INT_FAST32_MAX__ 2147483647
#define __INT_FAST64_MAX__ 9223372036854775807LL
#define __UINT_FAST8_MAX__ 255
#define __UINT_FAST16_MAX__ 65535
#define __UINT_FAST32_MAX__ 4294967295U
#define __UINT_FAST64_MAX__ 18446744073709551615ULL
#define __INTPTR_MAX__ 2147483647
#define __UINTPTR_MAX__ 4294967295U
#define __GCC_IEC_559 2
#define __GCC_IEC_559_COMPLEX 2
#define __FLT_EVAL_METHOD__ 2
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859812e+38F
#define __FLT_MIN__ 1.17549435082228750797e-38F
#define __FLT_EPSILON__ 1.19209289550781250000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.79769313486231570815e+308L)
#define __DBL_MIN__ ((double)2.22507385850720138309e-308L)
#define __DBL_EPSILON__ ((double)2.22044604925031308085e-16L)
#define __DBL_DENORM_MIN__ ((double)4.94065645841246544177e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 64
#define __LDBL_DIG__ 18
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 21
#define __LDBL_MAX__ 1.18973149535723176502e+4932L
#define __LDBL_MIN__ 3.36210314311209350626e-4932L
#define __LDBL_EPSILON__ 1.08420217248550443401e-19L
#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ _
#define __GNUC_GNU_INLINE__ 1
#define __NO_INLINE__ 1
#define __STRICT_ANSI__ 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 1
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 1
#define __GCC_ATOMIC_SHORT_LOCK_FREE 1
#define __GCC_ATOMIC_INT_LOCK_FREE 1
#define __GCC_ATOMIC_LONG_LOCK_FREE 1
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 1
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 2
#define __SIZEOF_WINT_T__ 2
#define __SIZEOF_PTRDIFF_T__ 4
#define __i386 1
#define __i386__ 1
#define __ATOMIC_HLE_ACQUIRE 65536
#define __ATOMIC_HLE_RELEASE 131072
#define __tune_i386__ 1
#define __code_model_32__ 1
#define _X86_ 1
#define __stdcall __attribute__((__stdcall__))
#define __fastcall __attribute__((__fastcall__))
#define __thiscall __attribute__((__thiscall__))
#define __cdecl __attribute__((__cdecl__))
#define __GXX_MERGED_TYPEINFO_NAMES 0
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __MSVCRT__ 1
#define __MINGW32__ 1
#define _WIN32 1
#define __WIN32 1
#define __WIN32__ 1
#define __WINNT 1
#define __WINNT__ 1
#define _INTEGRAL_MAX_BITS 64
#define __declspec(x) __attribute__((x))
#define __DECIMAL_BID_FORMAT__ 1
# 1 "<command-line>"
#define CFG_PROCESSOR 3
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_start_os_test.c"
# 1 "d:\\programm\\mingw\\include\\stdio.h" 1 3
# 16 "d:\\programm\\mingw\\include\\stdio.h" 3
#define _STDIO_H_ 


# 1 "d:\\programm\\mingw\\include\\_mingw.h" 1 3
# 23 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MINGW_H 
# 34 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MINGW32_VERSION 3021001L
#define __MINGW32_MAJOR_VERSION 3
#define __MINGW32_MINOR_VERSION 21
#define __MINGW32_PATCHLEVEL 1



       
# 42 "d:\\programm\\mingw\\include\\_mingw.h" 3
# 82 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __CRT_GLOB_USE_MSVCRT__ 0x0001




#define __CRT_GLOB_USE_MINGW__ 0x0002
# 117 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __CRT_GLOB_USE_SINGLE_QUOTE__ 0x0010
#define __CRT_GLOB_BRACKET_GROUPS__ 0x0020
#define __CRT_GLOB_CASE_SENSITIVE__ 0x0040
# 128 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __CRT_GLOB_ESCAPE_CHAR__ (char)(127)





#define __MINGW_ANSI_STDIO__ 0x0000000000000001ULL




#define __MINGW_LC_EXTENSIONS__ 0x0000000000000050ULL
#define __MINGW_LC_MESSAGES__ 0x0000000000000010ULL
#define __MINGW_LC_ENVVARS__ 0x0000000000000040ULL




#undef __attribute__
# 192 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MINGW_IMPORT extern __attribute__ ((__dllimport__))





#define _CRTIMP 


#define __DECLSPEC_SUPPORTED 
# 221 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __int64 long long


#define __int32 long


#define __int16 short


#define __int8 char


#define __small char


#define __hyper long long
# 250 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MINGW_GNUC_PREREQ(major,minor) (__GNUC__ > (major) || (__GNUC__ == (major) && __GNUC_MINOR__ >= (minor)))
# 265 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define _EXTERN_C extern
#define _BEGIN_C_DECLS 
#define _END_C_DECLS 




#define __CRT_INLINE extern __inline__
# 282 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define _CRTALIAS __CRT_INLINE __attribute__((__always_inline__))
#define __CRT_ALIAS __CRT_INLINE __attribute__((__always_inline__))
# 297 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __JMPSTUB__(__BUILD_HINT__) 
#define __LIBIMPL__(__BUILD_HINT__) 





#define __UNUSED_PARAM(x) x __attribute__ ((__unused__))






#define __MINGW_ATTRIB_NORETURN __attribute__ ((__noreturn__))
#define __MINGW_ATTRIB_CONST __attribute__ ((__const__))






#define __MINGW_ATTRIB_MALLOC __attribute__ ((__malloc__))
#define __MINGW_ATTRIB_PURE __attribute__ ((__pure__))
# 330 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MINGW_ATTRIB_NONNULL(arg) __attribute__ ((__nonnull__ (arg)))





#define __MINGW_ATTRIB_DEPRECATED __attribute__ ((__deprecated__))





#define __MINGW_NOTHROW __attribute__ ((__nothrow__))
# 353 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MSVCRT_VERSION__ 0x0600
# 373 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __USE_MINGW_ANSI_STDIO 1
# 20 "d:\\programm\\mingw\\include\\stdio.h" 2 3


#define __need_size_t 
#define __need_NULL 
#define __need_wchar_t 
#define __need_wint_t 
# 1 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 1 3 4
# 184 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 






#define __size_t 





typedef unsigned int size_t;
# 234 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_size_t
# 263 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 290 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 324 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
typedef short unsigned int wchar_t;
# 343 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_wchar_t




#define _WINT_T 




typedef short unsigned int wint_t;

#undef __need_wint_t
# 397 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 27 "d:\\programm\\mingw\\include\\stdio.h" 2 3
#define __need___va_list 
# 1 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stdarg.h" 1 3 4
# 34 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stdarg.h" 3 4
#undef __need___va_list




#define __GNUC_VA_LIST 
typedef __builtin_va_list __gnuc_va_list;
# 29 "d:\\programm\\mingw\\include\\stdio.h" 2 3




#define _IOREAD 1
#define _IOWRT 2
#define _IORW 0x0080






#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2


#define EOF (-1)







#define FILENAME_MAX (260)






#define FOPEN_MAX (20)


#define TMP_MAX 32767






#define _P_tmpdir "\\"



#define _wP_tmpdir L"\\"







#define L_tmpnam (16)

#define _IOFBF 0x0000
#define _IOLBF 0x0040
#define _IONBF 0x0004

#define _IOMYBUF 0x0008
#define _IOEOF 0x0010
#define _IOERR 0x0020
#define _IOSTRG 0x0040







#define BUFSIZ 512





#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2





#define __VALIST __gnuc_va_list
# 129 "d:\\programm\\mingw\\include\\stdio.h" 3
#define _FILE_DEFINED 
typedef struct _iobuf
{
 char* _ptr;
 int _cnt;
 char* _base;
 int _flag;
 int _file;
 int _charbuf;
 int _bufsiz;
 char* _tmpfname;
} FILE;
# 155 "d:\\programm\\mingw\\include\\stdio.h" 3
extern __attribute__ ((__dllimport__)) FILE _iob[];



#define stdin (&_iob[STDIN_FILENO])
#define stdout (&_iob[STDOUT_FILENO])
#define stderr (&_iob[STDERR_FILENO])






 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fopen (const char*, const char*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) freopen (const char*, const char*, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fflush (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fclose (FILE*);

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) remove (const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) rename (const char*, const char*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) tmpfile (void);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) tmpnam (char*);
# 190 "d:\\programm\\mingw\\include\\stdio.h" 3
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) setvbuf (FILE*, char*, int, size_t);

 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) setbuf (FILE*, char*);







#undef __mingw_stdio_redirect__
#define __mingw_stdio_redirect__(F) __cdecl __MINGW_NOTHROW __mingw_ ##F

extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_fprintf(FILE*, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_printf(const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_sprintf(char*, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_snprintf(char*, size_t, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vfprintf(FILE*, const char*, __gnuc_va_list);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vprintf(const char*, __gnuc_va_list);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vsprintf(char*, const char*, __gnuc_va_list);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vsnprintf(char*, size_t, const char*, __gnuc_va_list);





#undef __mingw_stdio_redirect__
# 231 "d:\\programm\\mingw\\include\\stdio.h" 3
#define __mingw_stdio_redirect__ static __inline__ __cdecl __MINGW_NOTHROW
# 240 "d:\\programm\\mingw\\include\\stdio.h" 3
static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int fprintf (FILE *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int printf (const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vprintf( __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int sprintf (char *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int vfprintf (FILE *__stream, const char *__format, __gnuc_va_list __local_argv)
{
  return __mingw_vfprintf( __stream, __format, __local_argv );
}

static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int vprintf (const char *__format, __gnuc_va_list __local_argv)
{
  return __mingw_vprintf( __format, __local_argv );
}

static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int vsprintf (char *__stream, const char *__format, __gnuc_va_list __local_argv)
{
  return __mingw_vsprintf( __stream, __format, __local_argv );
}
# 304 "d:\\programm\\mingw\\include\\stdio.h" 3
#undef __mingw_stdio_redirect__
#define __mingw_stdio_redirect__(F) __cdecl __MINGW_NOTHROW __msvcrt_ ##F

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_fprintf(FILE*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_printf(const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_sprintf(char*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_vfprintf(FILE*, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_vprintf(const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_vsprintf(char*, const char*, __gnuc_va_list);

#undef __mingw_stdio_redirect__



 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _snprintf (char*, size_t, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vsnprintf (char*, size_t, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vscprintf (const char*, __gnuc_va_list);
# 330 "d:\\programm\\mingw\\include\\stdio.h" 3
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) snprintf (char *, size_t, const char *, ...);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vsnprintf (char *, size_t, const char *, __gnuc_va_list);

int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vscanf (const char * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vfscanf (FILE * __restrict__, const char * __restrict__,
       __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vsscanf (const char * __restrict__,
       const char * __restrict__, __gnuc_va_list);







 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fscanf (FILE*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) scanf (const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) sscanf (const char*, const char*, ...);




 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetc (FILE*);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgets (char*, int, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputc (int, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputs (const char*, FILE*);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) gets (char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) puts (const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ungetc (int, FILE*);







 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _filbuf (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _flsbuf (int, FILE*);



extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getc (FILE* __F)
{
  return (--__F->_cnt >= 0)
    ? (int) (unsigned char) *__F->_ptr++
    : _filbuf (__F);
}

extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putc (int __c, FILE* __F)
{
  return (--__F->_cnt >= 0)
    ? (int) (unsigned char) (*__F->_ptr++ = (char)__c)
    : _flsbuf (__c, __F);
}

extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getchar (void)
{
  return (--(&_iob[0])->_cnt >= 0)
    ? (int) (unsigned char) *(&_iob[0])->_ptr++
    : _filbuf ((&_iob[0]));
}

extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putchar(int __c)
{
  return (--(&_iob[1])->_cnt >= 0)
    ? (int) (unsigned char) (*(&_iob[1])->_ptr++ = (char)__c)
    : _flsbuf (__c, (&_iob[1]));}
# 411 "d:\\programm\\mingw\\include\\stdio.h" 3
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fread (void*, size_t, size_t, FILE*);
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fwrite (const void*, size_t, size_t, FILE*);





 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fseek (FILE*, long, int);
 long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ftell (FILE*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) rewind (FILE*);
# 454 "d:\\programm\\mingw\\include\\stdio.h" 3
typedef long long fpos_t;




 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetpos (FILE*, fpos_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fsetpos (FILE*, const fpos_t*);





 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) feof (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ferror (FILE*);







#define feof(__F) ((__F)->_flag & _IOEOF)
#define ferror(__F) ((__F)->_flag & _IOERR)


 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) clearerr (FILE*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) perror (const char*);
# 628 "d:\\programm\\mingw\\include\\stdio.h" 3
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fwprintf (FILE*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wprintf (const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _snwprintf (wchar_t*, size_t, const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vfwprintf (FILE*, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vwprintf (const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vsnwprintf (wchar_t*, size_t, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vscwprintf (const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fwscanf (FILE*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wscanf (const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) swscanf (const wchar_t*, const wchar_t*, ...);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetwc (FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputwc (wchar_t, FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ungetwc (wchar_t, FILE*);
# 649 "d:\\programm\\mingw\\include\\stdio.h" 3
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetws (wchar_t*, int, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputws (const wchar_t*, FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getwc (FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getwchar (void);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _getws (wchar_t*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putwc (wint_t, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _putws (const wchar_t*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putwchar (wint_t);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfdopen(int, const wchar_t *);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfopen (const wchar_t*, const wchar_t*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfreopen (const wchar_t*, const wchar_t*, FILE*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfsopen (const wchar_t*, const wchar_t*, int);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wtmpnam (wchar_t*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wtempnam (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wrename (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wremove (const wchar_t*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wperror (const wchar_t*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wpopen (const wchar_t*, const wchar_t*);



int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) snwprintf (wchar_t* s, size_t n, const wchar_t* format, ...);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __gnuc_va_list arg);





int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vwscanf (const wchar_t * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vfwscanf (FILE * __restrict__,
         const wchar_t * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vswscanf (const wchar_t * __restrict__,
         const wchar_t * __restrict__, __gnuc_va_list);


#define _WSTDIO_DEFINED 
# 711 "d:\\programm\\mingw\\include\\stdio.h" 3

# 2 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_start_os_test.c" 2

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h" 1
# 38 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h"
#define HAVE_SPUT_H 
# 47 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h"
# 1 "d:\\programm\\mingw\\include\\stdlib.h" 1 3
# 12 "d:\\programm\\mingw\\include\\stdlib.h" 3
#define _STDLIB_H_ 




#define __need_size_t 
#define __need_wchar_t 
#define __need_NULL 


# 1 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 1 3 4
# 234 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_size_t
# 343 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 397 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 23 "d:\\programm\\mingw\\include\\stdlib.h" 2 3






#define RAND_MAX 0x7FFF




#define EXIT_SUCCESS 0
#define EXIT_FAILURE 1
# 60 "d:\\programm\\mingw\\include\\stdlib.h" 3

# 110 "d:\\programm\\mingw\\include\\stdlib.h" 3
#define MB_CUR_MAX __mb_cur_max
   extern __attribute__ ((__dllimport__)) int __mb_cur_max;
# 136 "d:\\programm\\mingw\\include\\stdlib.h" 3
 int* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _errno(void);
#define errno (*_errno())

 int* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __doserrno(void);
#define _doserrno (*__doserrno())
# 302 "d:\\programm\\mingw\\include\\stdlib.h" 3
 double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) atof (const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) atoi (const char*);
 long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) atol (const char*);






double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __strtod (const char*, char**);
extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
strtod (const char* __restrict__ __nptr, char** __restrict__ __endptr);
float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof (const char * __restrict__, char ** __restrict__);
long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold (const char * __restrict__, char ** __restrict__);




 long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtol (const char*, char**, int);
 unsigned long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtoul (const char*, char**, int);



 long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcstol (const wchar_t*, wchar_t**, int);
 unsigned long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcstoul (const wchar_t*, wchar_t**, int);
 double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcstod (const wchar_t*, wchar_t**);

float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcstof( const wchar_t * __restrict__, wchar_t ** __restrict__);
long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);


 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wgetenv(const wchar_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wputenv(const wchar_t*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wsearchenv(const wchar_t*, const wchar_t*, wchar_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wsystem(const wchar_t*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wmakepath(wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wsplitpath (const wchar_t*, wchar_t*, wchar_t*, wchar_t*, wchar_t*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfullpath (wchar_t*, const wchar_t*, size_t);

#define _WSTDLIB_DEFINED 


 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcstombs (char*, const wchar_t*, size_t);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wctomb (char*, wchar_t);

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) mblen (const char*, size_t);
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) mbstowcs (wchar_t*, const char*, size_t);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) mbtowc (wchar_t*, const char*, size_t);

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) rand (void);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) srand (unsigned int);

 void* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) calloc (size_t, size_t) __attribute__ ((__malloc__));
 void* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) malloc (size_t) __attribute__ ((__malloc__));
 void* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) realloc (void*, size_t);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) free (void*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) abort (void) __attribute__ ((__noreturn__));
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit (int) __attribute__ ((__noreturn__));


int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) atexit (void (*)(void));

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) system (const char*);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getenv (const char*);


 void* __attribute__((__cdecl__)) bsearch (const void*, const void*, size_t, size_t,
          int (*)(const void*, const void*));
 void __attribute__((__cdecl__)) qsort(void*, size_t, size_t,
      int (*)(const void*, const void*));

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) abs (int) __attribute__ ((__const__));
 long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) labs (long) __attribute__ ((__const__));
# 384 "d:\\programm\\mingw\\include\\stdlib.h" 3
typedef struct { int quot, rem; } div_t;
typedef struct { long quot, rem; } ldiv_t;

 div_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) div (int, int) __attribute__ ((__const__));
 ldiv_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ldiv (long, long) __attribute__ ((__const__));
# 496 "d:\\programm\\mingw\\include\\stdlib.h" 3
void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _Exit(int) __attribute__ ((__noreturn__));





typedef struct { long long quot, rem; } lldiv_t;

lldiv_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) lldiv (long long, long long) __attribute__ ((__const__));

long long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) llabs(long long);
# 516 "d:\\programm\\mingw\\include\\stdlib.h" 3
long long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtoll (const char* __restrict__, char** __restrict, int);
unsigned long long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtoull (const char* __restrict__, char** __restrict__, int);


long long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) atoll (const char *);
# 629 "d:\\programm\\mingw\\include\\stdlib.h" 3

# 48 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h" 2
# 1 "d:\\programm\\mingw\\include\\string.h" 1 3
# 12 "d:\\programm\\mingw\\include\\string.h" 3
#define _STRING_H_ 







#define __need_size_t 
#define __need_wchar_t 
#define __need_NULL 

# 1 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 1 3 4
# 234 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_size_t
# 343 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 397 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 25 "d:\\programm\\mingw\\include\\string.h" 2 3
# 36 "d:\\programm\\mingw\\include\\string.h" 3
 void* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) memchr (const void*, int, size_t) __attribute__ ((__pure__));
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) memcmp (const void*, const void*, size_t) __attribute__ ((__pure__));
 void* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) memcpy (void*, const void*, size_t);
 void* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) memmove (void*, const void*, size_t);
 void* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) memset (void*, int, size_t);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strcat (char*, const char*);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strchr (const char*, int) __attribute__ ((__pure__));
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strcmp (const char*, const char*) __attribute__ ((__pure__));
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strcoll (const char*, const char*);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strcpy (char*, const char*);
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strcspn (const char*, const char*) __attribute__ ((__pure__));
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strerror (int);

 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strlen (const char*) __attribute__ ((__pure__));
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strncat (char*, const char*, size_t);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strncmp (const char*, const char*, size_t) __attribute__ ((__pure__));
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strncpy (char*, const char*, size_t);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strpbrk (const char*, const char*) __attribute__ ((__pure__));
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strrchr (const char*, int) __attribute__ ((__pure__));
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strspn (const char*, const char*) __attribute__ ((__pure__));
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strstr (const char*, const char*) __attribute__ ((__pure__));
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtok (char*, const char*);
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strxfrm (char*, const char*, size_t);
# 126 "d:\\programm\\mingw\\include\\string.h" 3
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcscat (wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcschr (const wchar_t*, wchar_t);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcscmp (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcscoll (const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcscpy (wchar_t*, const wchar_t*);
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcscspn (const wchar_t*, const wchar_t*);

 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcslen (const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcsncat (wchar_t*, const wchar_t*, size_t);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcsncmp(const wchar_t*, const wchar_t*, size_t);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcsncpy(wchar_t*, const wchar_t*, size_t);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcspbrk(const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcsrchr(const wchar_t*, wchar_t);
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcsspn(const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcsstr(const wchar_t*, const wchar_t*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcstok(wchar_t*, const wchar_t*);
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcsxfrm(wchar_t*, const wchar_t*, size_t);
# 192 "d:\\programm\\mingw\\include\\string.h" 3
#define _WSTRING_DEFINED 
# 49 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h" 2
# 1 "d:\\programm\\mingw\\include\\time.h" 1 3
# 33 "d:\\programm\\mingw\\include\\time.h" 3
#define _TIME_H 







#define CLOCKS_PER_SEC ((clock_t)(1000))
#define CLK_TCK CLOCKS_PER_SEC
# 51 "d:\\programm\\mingw\\include\\time.h" 3
#define __need_time_t 
#define __need_struct_timespec 
# 1 "d:\\programm\\mingw\\include\\parts\\time.h" 1 3
# 64 "d:\\programm\\mingw\\include\\parts\\time.h" 3
   typedef long __time32_t;
   typedef long long __time64_t;
# 74 "d:\\programm\\mingw\\include\\parts\\time.h" 3
    typedef __time32_t time_t;
# 87 "d:\\programm\\mingw\\include\\parts\\time.h" 3
#define __have_typedef_time_t 1
# 105 "d:\\programm\\mingw\\include\\parts\\time.h" 3
struct timespec
{



  union
  {



    time_t tv_sec;
    __time32_t __tv32_sec;
    __time64_t __tv64_sec;
  };
  long tv_nsec;
};
#define __struct_timespec_defined 1
# 54 "d:\\programm\\mingw\\include\\time.h" 2 3




#define __need_NULL 
#define __need_wchar_t 
#define __need_size_t 
# 1 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 1 3 4
# 234 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_size_t
# 343 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 397 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 62 "d:\\programm\\mingw\\include\\time.h" 2 3




typedef long clock_t;






struct tm
{
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;

};
#define _TM_DEFINED 




 clock_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) clock (void);

 time_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) time (time_t*);
 double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) difftime (time_t, time_t);
 time_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) mktime (struct tm*);
# 108 "d:\\programm\\mingw\\include\\time.h" 3
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) asctime (const struct tm*);

 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ctime (const time_t*);
 struct tm* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) gmtime (const time_t*);
 struct tm* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) localtime (const time_t*);


 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strftime (char*, size_t, const char*, const struct tm*);
# 213 "d:\\programm\\mingw\\include\\time.h" 3
extern __attribute__ ((__dllimport__)) int daylight;
extern __attribute__ ((__dllimport__)) long timezone;
extern __attribute__ ((__dllimport__)) char *tzname[2];
# 257 "d:\\programm\\mingw\\include\\time.h" 3
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);
#define _WTIME_DEFINED 



# 50 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h" 2






#define SPUT_VERSION_MAJOR 1
#define SPUT_VERSION_MINOR 4
#define SPUT_VERSION_PATCH 0
#define SPUT_VERSION_STRING "1.4.0"

#define SPUT_DEFAULT_SUITE_NAME "Unlabeled Suite"
#define SPUT_DEFAULT_CHECK_NAME "Unlabeled Check"

#define SPUT_INITIALIZED 0x06






    static struct sput
    {
        FILE *out;
        char initialized;

        struct sput_overall
        {
            unsigned long checks;
            unsigned long suites;
            unsigned long ok;
            unsigned long nok;
        } overall;

        struct sput_suite
        {
            const char *name;
            unsigned long nr;
            unsigned long checks;
            unsigned long ok;
            unsigned long nok;
        } suite;

        struct sput_test
        {
            const char *name;
            unsigned long nr;
        } test;

        struct sput_check
        {
            const char *name;
            const char *cond;
            const char *type;
            unsigned long line;
        } check;

        struct sput_time
        {
            time_t start;
            time_t end;
        } time;
    } __sput;






#define _sput_die_unless_initialized() if (__sput.initialized != SPUT_INITIALIZED) { fputs("sput_start_testing() omitted\n", stderr); exit(EXIT_FAILURE); }







#define _sput_die_unless_suite_set() if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(EXIT_FAILURE); }







#define _sput_die_unless_test_set() if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(EXIT_FAILURE); }







#define _sput_check_failed() { _sput_die_unless_initialized(); _sput_die_unless_suite_set(); __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }
# 159 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h"
#define _sput_check_succeeded() { _sput_die_unless_initialized(); _sput_die_unless_suite_set(); __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }
# 177 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h"
#define sput_start_testing() do { memset(&__sput, 0, sizeof(__sput)); __sput.out = stdout; __sput.time.start = time(NULL); __sput.initialized = SPUT_INITIALIZED; } while (0)
# 186 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h"
#define sput_leave_suite() do { float failpls = 0.0f; _sput_die_unless_initialized(); _sput_die_unless_suite_set(); failpls = __sput.suite.checks ? (float) ((__sput.suite.nok * 100.0) / __sput.suite.checks) : 0.0f; fprintf(__sput.out, "\n--> %lu check(s), %lu ok, %lu failed (%.2f%%)\n", __sput.suite.checks, __sput.suite.ok, __sput.suite.nok, failpls); __sput.overall.checks += __sput.suite.checks; __sput.overall.ok += __sput.suite.ok; __sput.overall.nok += __sput.suite.nok; memset(&__sput.suite, 0, sizeof(__sput.suite)); } while (0)
# 205 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h"
#define sput_get_return_value() (__sput.overall.nok > 0 ? EXIT_FAILURE : EXIT_SUCCESS)



#define sput_enter_suite(_name) do { _sput_die_unless_initialized(); if (__sput.suite.name) { sput_leave_suite(); } __sput.suite.name = _name != NULL ? _name : SPUT_DEFAULT_SUITE_NAME; __sput.suite.nr = ++__sput.overall.suites; fprintf(__sput.out, "\n== Entering suite #%lu, \"%s\" ==\n\n", __sput.suite.nr, __sput.suite.name); } while (0)
# 224 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h"
#define sput_finish_testing() do { float failpft = 0.0f; _sput_die_unless_initialized(); if (__sput.suite.name) { sput_leave_suite(); } failpft = __sput.overall.checks ? (float) ((__sput.overall.nok * 100.0) / __sput.overall.checks) : 0.0f; __sput.time.end = time(NULL); fprintf(__sput.out, "\n==> %lu check(s) in %lu suite(s) finished after %.2f " "second(s),\n" "    %lu succeeded, %lu failed (%.2f%%)\n" "\n[%s]\n", __sput.overall.checks, __sput.overall.suites, difftime(__sput.time.end, __sput.time.start), __sput.overall.ok, __sput.overall.nok, failpft, (sput_get_return_value() == EXIT_SUCCESS) ? "SUCCESS" : "FAILURE"); } while (0)
# 249 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h"
#define sput_set_output_stream(_fp) do { __sput.out = _fp != NULL ? _fp : stdout; } while (0)





#define sput_fail_if(_cond,_name) do { _sput_die_unless_initialized(); _sput_die_unless_suite_set(); _sput_die_unless_test_set(); __sput.check.name = _name != NULL ? _name : SPUT_DEFAULT_CHECK_NAME; __sput.check.line = __LINE__; __sput.check.cond = #_cond; __sput.check.type = "fail-if"; __sput.test.nr++; __sput.suite.checks++; if ((_cond)) { _sput_check_failed(); } else { _sput_check_succeeded(); } } while (0)
# 278 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h"
#define sput_fail_unless(_cond,_name) do { _sput_die_unless_initialized(); _sput_die_unless_suite_set(); _sput_die_unless_test_set(); __sput.check.name = _name != NULL ? _name : SPUT_DEFAULT_CHECK_NAME; __sput.check.line = __LINE__; __sput.check.cond = #_cond; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (_cond)) { _sput_check_failed(); } else { _sput_check_succeeded(); } } while (0)
# 301 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_sput.h"
#define sput_run_test(_func) do { _sput_die_unless_initialized(); _sput_die_unless_suite_set(); memset(&__sput.test, 0, sizeof(__sput.test)); __sput.test.name = #_func; _func(); } while (0)
# 4 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_start_os_test.c" 2
# 13 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_start_os_test.c"
static int count_vowels(const char *s)
{
    const char *cp = s;
    int count = 0;

    while (*cp)
    {
        if (*cp == 'a' || *cp == 'e' || *cp == 'i' ||
                *cp == 'o' || *cp == 'u')
        {
            count++;
        }

        cp++;
    }

    return count;
}


static void test_vowels_present()
{
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(1); }; __sput.check.name = "book == 2v" != ((void *)0) ? "book == 2v" : "Unlabeled Check"; __sput.check.line = 35; __sput.check.cond = "count_vowels(\"book\") == 2"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("book") == 2)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(1); }; __sput.check.name = "hand == 1v" != ((void *)0) ? "hand == 1v" : "Unlabeled Check"; __sput.check.line = 36; __sput.check.cond = "count_vowels(\"hand\") == 1"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("hand") == 1)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(1); }; __sput.check.name = "test == 1v" != ((void *)0) ? "test == 1v" : "Unlabeled Check"; __sput.check.line = 37; __sput.check.cond = "count_vowels(\"test\") == 1"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("test") == 1)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(1); }; __sput.check.name = "Peter == 2v" != ((void *)0) ? "Peter == 2v" : "Unlabeled Check"; __sput.check.line = 38; __sput.check.cond = "count_vowels(\"Peter\") == 2"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("Peter") == 2)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(1); }; __sput.check.name = "Apu == 2v" != ((void *)0) ? "Apu == 2v" : "Unlabeled Check"; __sput.check.line = 39; __sput.check.cond = "count_vowels(\"Apu\") == 2"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("Apu") == 2)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
}


static void test_no_vowels_present()
{
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(1); }; __sput.check.name = "GCC == 0v" != ((void *)0) ? "GCC == 0v" : "Unlabeled Check"; __sput.check.line = 45; __sput.check.cond = "count_vowels(\"GCC\") == 0"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("GCC") == 0)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(1); }; __sput.check.name = "BBC == 0v" != ((void *)0) ? "BBC == 0v" : "Unlabeled Check"; __sput.check.line = 46; __sput.check.cond = "count_vowels(\"BBC\") == 0"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("BBC") == 0)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(1); }; __sput.check.name = "CNN == 0v" != ((void *)0) ? "CNN == 0v" : "Unlabeled Check"; __sput.check.line = 47; __sput.check.cond = "count_vowels(\"CNN\") == 0"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("CNN") == 0)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(1); }; __sput.check.name = "GPS == 0v" != ((void *)0) ? "GPS == 0v" : "Unlabeled Check"; __sput.check.line = 48; __sput.check.cond = "count_vowels(\"GPS\") == 0"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("GPS") == 0)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(1); }; __sput.check.name = "Ltd == 0v" != ((void *)0) ? "Ltd == 0v" : "Unlabeled Check"; __sput.check.line = 49; __sput.check.cond = "count_vowels(\"Ltd\") == 0"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("Ltd") == 0)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
}


int main(int argc, char *argv[])
{
    do { memset(&__sput, 0, sizeof(__sput)); __sput.out = (&_iob[1]); __sput.time.start = time(((void *)0)); __sput.initialized = 0x06; } while (0);

    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (__sput.suite.name) { do { float failpls = 0.0f; if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; failpls = __sput.suite.checks ? (float) ((__sput.suite.nok * 100.0) / __sput.suite.checks) : 0.0f; fprintf(__sput.out, "\n--> %lu check(s), %lu ok, %lu failed (%.2f%%)\n", __sput.suite.checks, __sput.suite.ok, __sput.suite.nok, failpls); __sput.overall.checks += __sput.suite.checks; __sput.overall.ok += __sput.suite.ok; __sput.overall.nok += __sput.suite.nok; memset(&__sput.suite, 0, sizeof(__sput.suite)); } while (0); } __sput.suite.name = "count_vowels(): Vowels Present" != ((void *)0) ? "count_vowels(): Vowels Present" : "Unlabeled Suite"; __sput.suite.nr = ++__sput.overall.suites; fprintf(__sput.out, "\n== Entering suite #%lu, \"%s\" ==\n\n", __sput.suite.nr, __sput.suite.name); } while (0);
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; memset(&__sput.test, 0, sizeof(__sput.test)); __sput.test.name = "test_vowels_present"; test_vowels_present(); } while (0);

    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (__sput.suite.name) { do { float failpls = 0.0f; if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; failpls = __sput.suite.checks ? (float) ((__sput.suite.nok * 100.0) / __sput.suite.checks) : 0.0f; fprintf(__sput.out, "\n--> %lu check(s), %lu ok, %lu failed (%.2f%%)\n", __sput.suite.checks, __sput.suite.ok, __sput.suite.nok, failpls); __sput.overall.checks += __sput.suite.checks; __sput.overall.ok += __sput.suite.ok; __sput.overall.nok += __sput.suite.nok; memset(&__sput.suite, 0, sizeof(__sput.suite)); } while (0); } __sput.suite.name = "count_vowels(): No Vowels Present" != ((void *)0) ? "count_vowels(): No Vowels Present" : "Unlabeled Suite"; __sput.suite.nr = ++__sput.overall.suites; fprintf(__sput.out, "\n== Entering suite #%lu, \"%s\" ==\n\n", __sput.suite.nr, __sput.suite.name); } while (0);
    do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; memset(&__sput.test, 0, sizeof(__sput.test)); __sput.test.name = "test_no_vowels_present"; test_no_vowels_present(); } while (0);

    do { float failpft = 0.0f; if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (__sput.suite.name) { do { float failpls = 0.0f; if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", (&_iob[2])); exit(1); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(1); }; failpls = __sput.suite.checks ? (float) ((__sput.suite.nok * 100.0) / __sput.suite.checks) : 0.0f; fprintf(__sput.out, "\n--> %lu check(s), %lu ok, %lu failed (%.2f%%)\n", __sput.suite.checks, __sput.suite.ok, __sput.suite.nok, failpls); __sput.overall.checks += __sput.suite.checks; __sput.overall.ok += __sput.suite.ok; __sput.overall.nok += __sput.suite.nok; memset(&__sput.suite, 0, sizeof(__sput.suite)); } while (0); } failpft = __sput.overall.checks ? (float) ((__sput.overall.nok * 100.0) / __sput.overall.checks) : 0.0f; __sput.time.end = time(((void *)0)); fprintf(__sput.out, "\n==> %lu check(s) in %lu suite(s) finished after %.2f " "second(s),\n" "    %lu succeeded, %lu failed (%.2f%%)\n" "\n[%s]\n", __sput.overall.checks, __sput.overall.suites, difftime(__sput.time.end, __sput.time.start), __sput.overall.ok, __sput.overall.nok, failpft, ((__sput.overall.nok > 0 ? 1 : 0) == 0) ? "SUCCESS" : "FAILURE"); } while (0);

    return (__sput.overall.nok > 0 ? 1 : 0);
}
