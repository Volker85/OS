# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\os_sim_main.c"
# 1 "D:\\Programm\\MinGW\\bin//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 4
#define __GNUC_MINOR__ 9
#define __GNUC_PATCHLEVEL__ 3
#define __VERSION__ "4.9.3"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 12
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ short unsigned int
#define __WINT_TYPE__ short unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST16_TYPE__ short int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_FAST16_TYPE__ short unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_ABI_VERSION 1002
#define __SCHAR_MAX__ 127
#define __SHRT_MAX__ 32767
#define __INT_MAX__ 2147483647
#define __LONG_MAX__ 2147483647L
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __WCHAR_MAX__ 65535
#define __WCHAR_MIN__ 0
#define __WINT_MAX__ 65535
#define __WINT_MIN__ 0
#define __PTRDIFF_MAX__ 2147483647
#define __SIZE_MAX__ 4294967295U
#define __INTMAX_MAX__ 9223372036854775807LL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 18446744073709551615ULL
#define __UINTMAX_C(c) c ## ULL
#define __SIG_ATOMIC_MAX__ 2147483647
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __INT8_MAX__ 127
#define __INT16_MAX__ 32767
#define __INT32_MAX__ 2147483647
#define __INT64_MAX__ 9223372036854775807LL
#define __UINT8_MAX__ 255
#define __UINT16_MAX__ 65535
#define __UINT32_MAX__ 4294967295U
#define __UINT64_MAX__ 18446744073709551615ULL
#define __INT_LEAST8_MAX__ 127
#define __INT8_C(c) c
#define __INT_LEAST16_MAX__ 32767
#define __INT16_C(c) c
#define __INT_LEAST32_MAX__ 2147483647
#define __INT32_C(c) c
#define __INT_LEAST64_MAX__ 9223372036854775807LL
#define __INT64_C(c) c ## LL
#define __UINT_LEAST8_MAX__ 255
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 65535
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 4294967295U
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 18446744073709551615ULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 127
#define __INT_FAST16_MAX__ 32767
#define __INT_FAST32_MAX__ 2147483647
#define __INT_FAST64_MAX__ 9223372036854775807LL
#define __UINT_FAST8_MAX__ 255
#define __UINT_FAST16_MAX__ 65535
#define __UINT_FAST32_MAX__ 4294967295U
#define __UINT_FAST64_MAX__ 18446744073709551615ULL
#define __INTPTR_MAX__ 2147483647
#define __UINTPTR_MAX__ 4294967295U
#define __GCC_IEC_559 2
#define __GCC_IEC_559_COMPLEX 2
#define __FLT_EVAL_METHOD__ 2
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859812e+38F
#define __FLT_MIN__ 1.17549435082228750797e-38F
#define __FLT_EPSILON__ 1.19209289550781250000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.79769313486231570815e+308L)
#define __DBL_MIN__ ((double)2.22507385850720138309e-308L)
#define __DBL_EPSILON__ ((double)2.22044604925031308085e-16L)
#define __DBL_DENORM_MIN__ ((double)4.94065645841246544177e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 64
#define __LDBL_DIG__ 18
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 21
#define __LDBL_MAX__ 1.18973149535723176502e+4932L
#define __LDBL_MIN__ 3.36210314311209350626e-4932L
#define __LDBL_EPSILON__ 1.08420217248550443401e-19L
#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ _
#define __GNUC_GNU_INLINE__ 1
#define __NO_INLINE__ 1
#define __STRICT_ANSI__ 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 1
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 1
#define __GCC_ATOMIC_SHORT_LOCK_FREE 1
#define __GCC_ATOMIC_INT_LOCK_FREE 1
#define __GCC_ATOMIC_LONG_LOCK_FREE 1
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 1
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 2
#define __SIZEOF_WINT_T__ 2
#define __SIZEOF_PTRDIFF_T__ 4
#define __i386 1
#define __i386__ 1
#define __ATOMIC_HLE_ACQUIRE 65536
#define __ATOMIC_HLE_RELEASE 131072
#define __tune_i386__ 1
#define __code_model_32__ 1
#define _X86_ 1
#define __stdcall __attribute__((__stdcall__))
#define __fastcall __attribute__((__fastcall__))
#define __thiscall __attribute__((__thiscall__))
#define __cdecl __attribute__((__cdecl__))
#define __GXX_MERGED_TYPEINFO_NAMES 0
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __MSVCRT__ 1
#define __MINGW32__ 1
#define _WIN32 1
#define __WIN32 1
#define __WIN32__ 1
#define __WINNT 1
#define __WINNT__ 1
#define _INTEGRAL_MAX_BITS 64
#define __declspec(x) __attribute__((x))
#define __DECIMAL_BID_FORMAT__ 1
# 1 "<command-line>"
#define CFG_PROCESSOR 3
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\os_sim_main.c"
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_firstinc.h" 1

#define _os_firstinc_h_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_base_types.h" 1

#define _BASE_TYPES_H_ 

#define INTEGER_LLP64_IL32P64 1
#define INTEGER_LP64_I32LP64 2
#define INTEGER_ILP64 3
#define INTEGER_SILP64 4

#define CPP_VERSION_NONE 0
#define CPP_VERSION_1998 1
#define CPP_VERSION_2003 2
#define CPP_VERSION_2007 3
#define CPP_VERSION_2011 4
#define ISO_CPP_VERSION CPP_VERSION_1998

#define INTEGER_MODEL INTEGER_LLP64_IL32P64
# 29 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_base_types.h"
typedef unsigned char unsigned_char_t;
typedef signed char signed_char_t;
typedef unsigned char unsigned_int8_t;
typedef signed char signed_int8_t;
typedef unsigned char uint8;
typedef signed char sint8;
typedef unsigned short unsigned_int16_t;
typedef signed short signed_int16_t;
typedef unsigned short uint16;
typedef signed short sint16;
typedef unsigned long unsigned_int32_t;
typedef signed long signed_int32_t;
typedef unsigned long uint32;
typedef signed long sint32;
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_firstinc.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_common.h" 1

#define _os_common_h_ 



#define False 0
#define True 1
#define FALSE False
#define TRUE True
#define Accepted 1
#define Rejected 0
#define Local static
#define Local_inline static __inline__
#define Global_inline __inline__
#define ReferenceUnusedParameter(x) ((x) = (x))
#define DynamicMemoryUsed False


#define cMCU_X86 3
#define cMCU_CORTEX_M4 4


#define NR_OF_CORES 1

#define MCU_CLOCK_IN_HZ ((uint32)168000000u)



#define DisableInterrupts() 
#define EnableInterrupts() 
#define Privilige_level_save_current() 
#define Privilige_level_enter_kernel_mode() 
#define Privilige_level_restore_saved() 
#define HaltMcu() 
# 43 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_common.h"
enum os_sw_bugs_e
{
   os_bug_no_bug = 0,
   os_bug_taskstate_request_denied,
   os_bug_null_pointer,
   os_bug_task_max_wait_time_reached,
   os_bug_Task_unspecified,
   os_bug_exception_UndefInstruction,
   os_bug_exception_AbortPrefetch,
   os_bug_exception_AbortData,
   os_bug_reset_exit_or_shutdown_failed,
   os_bug_critical_stack_usage,
   os_bug_svc_number_missing
};
typedef enum os_sw_bugs_e os_sw_bugs_t;
typedef uint8 boolean_t;
enum os_sw_bugs_function_e
{
   Func_NoFunction = 0,
   Func_SaveTaskEnvironment,
   Func_RestoreTaskEnvironment,
   Func_CreateTaskEnvironment,
   Func_DeleteTaskEnvironment,
   Func_InitTaskEnvironment,
   Func_StartTask,
   Func_PreemptTask,
   Func_TerminateTask,
   Func_TaskScheduler,
   Func_InitTask,
   Func_ActivateTask,
   Func_TaskStateRequest,
   Func_Preempt_Task,
   Func_os_exception,
   Func_CreateTask,
   Func_Shutdown,
   Func_StackCheck,
   Func_IsrHandler
};
typedef enum os_sw_bugs_function_e os_sw_bugs_function_t;



extern void OS_SetSwBug(os_sw_bugs_t bug_nr, os_sw_bugs_function_t task_func_nr);

typedef void (*func_ptr_t)(void);


#define BigIntSize 16
typedef struct BigInt_s
{







  uint8 Number[16];
}BigInt;
extern void AssignNull(BigInt* leftOperand);
extern void Assign(BigInt* leftOperand, BigInt* rightOperand);
extern void AssignUint32(BigInt* leftOperand, uint32 rightOperand);
extern boolean_t IsGreaterOrEqual(BigInt* Operand1, BigInt* Operand2);
extern boolean_t IsGreater(BigInt* Operand1, BigInt* Operand2);
extern boolean_t IsEqual(BigInt* Operand1, BigInt* Operand2);
extern boolean_t IsLessOrEqual(BigInt* Operand1, BigInt* Operand2);
extern boolean_t IsLess(BigInt* Operand1, BigInt* Operand2);




extern void IntSub(BigInt* Differenz, BigInt* Minuend, BigInt* Subtrahend);
extern void IntAdd(BigInt* Summe, BigInt* ErsterSummand, BigInt* ZweiterSummand);
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_firstinc.h" 2


# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_global.h" 1

#define _lld_global_h_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_core.h" 1

#define _lld_core_h_ 
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\..\\os_base\\os_firstinc.h" 1
# 4 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_core.h" 2
enum CoreID_e
{
   Core0 = 0,
   Core1,
   Core2,
   Core3
};
typedef enum CoreID_e CoreID_t;

extern CoreID_t OS_GetCoreId(void);
extern void LLF_CHANGE_TO_UNPRIVILIGED_THREAD_MODE(void);

enum privilige_mode_e
{
   ePriviligeMode_unpriviliged_thread_mode = 0,
   ePriviligeMode_priviliged_thread_mode,
   ePriviligeMode_priviliged_handler_mode
};
typedef enum privilige_mode_e privilige_mode_t;
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_interrupt.h" 1

#define _lld_interrupt_h_ 


#define os_interrupt_swi_1 asm("swi 1")
#define os_interrupt_swi_2 asm("swi 2")
#define os_interrupt_swi_3 asm("swi 3")
#define os_interrupt_swi_4 asm("swi 4")
#define os_interrupt_swi_5 asm("swi 5")

extern void LLF_INT_DISABLE(void);
extern void LLF_INT_ENABLE(void);
extern void LLF_DISABLE_INTERRUPTS_ALL_CORES(void);
extern void LLF_WAIT_FOR_INTERRUPT(void);
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_mmu.h" 1

#define _lld_mmu_h_ 


extern void LLF_MPU_DISABLE(void);
extern void LLF_MPU_ENABLE(void);
extern uint32 LLF_GET_MPU_PRESENT(void);
extern void LLF_MMU_SET_REGION(void* startAddr, void* endAddr);
# 7 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_timer.h" 1

#define _lld_timer_h_ 
# 8 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_power.h" 1

#define _lld_power_h_ 

extern void LLF_MCU_SWITCH_OFF_POWER(void);
extern void LLF_MCU_RESET_POWER(void);
# 9 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_ram.h" 1

#define _lld_ram_h_ 

extern void LLF_CLEAR_ALL_RAM(void);
# 10 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 1

#define _os_task_common_h_ 
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\..\\os_base\\os_firstinc.h" 1
# 4 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\..\\os_base\\os_task_config.h" 1

#define _os_task_config_h_ 


#define SchedulerFrequency (1.0e3)
#define MinTimeSlice_s (1.0/SchedulerFrequency)
#define MinTimeSlice_us ((1.0/SchedulerFrequency)*1e6)
#define Task_min_time (1e0)
#define NUMBER_OF_TASKS 10
#define MAX_RUN_QUEUE_SIZE (NUMBER_OF_TASKS)
#define MAX_RUN_PQUEUE_SIZE MAX_RUN_QUEUE_SIZE

#define TASK_STACK_SIZE 2000


#define MS_PER_SEC (1000)
#define USE_STATIC_CREATED_TASKS True
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\..\\os_base\\os_init_task_system.h" 1

#define _os_init_task_system_h_ 
extern void OS_InitTaskSystem(void);
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 2

enum task_state_e
{
   Task_unspecified = 0,
   Task_suspended,
   Task_ready,
   Task_running
};
typedef enum task_state_e task_state_t;



typedef void (*func_p_void_void_t) (void);
typedef void (*func_p_t) (void* task);
typedef unsigned_char_t (*func_p_u8_t) (void* task);
typedef unsigned_char_t (*func_p_state_change_t)(void* task, task_state_t requested_task_state);
typedef BigInt timebig_t;

struct task_group_s
{
   timebig_t exe_time;
   timebig_t fair_exe_time;
};
typedef struct task_group_s task_group_t;

struct task_s
{
   unsigned active :1;
   unsigned task_queued :1;
   unsigned IdleTask :1;
   unsigned FREE :29;
   unsigned_char_t NrOfInsAllowed;
   unsigned_char_t NrOfInsActivated;
   timebig_t WaitActUntil;
   timebig_t wait_time;
   timebig_t TimeToPrioInc;
   uint32 overwaittime_per_prio_inc_step;
   timebig_t max_allowed_wait_time;
   timebig_t exe_time;
   timebig_t start_time;
   unsigned_char_t current_prio;
   unsigned_char_t default_prio;
   unsigned_int32_t task_number;
   func_p_t fp;
   func_p_state_change_t state_request;
   task_state_t task_state;
   task_group_t* task_group;

   unsigned_int32_t EAX;
   unsigned_int32_t EBX;
   unsigned_int32_t ECX;
   unsigned_int32_t EDX;
# 73 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h"
   unsigned_char_t* pStackPointer;
   unsigned_char_t* pStackPointerByMalloc;
   unsigned_char_t* pStackPointerStart;
   unsigned_int32_t StackSize;
   unsigned_char_t* pStackPointerEnd;
   privilige_mode_t privilige_mode;
};
typedef struct task_s task_t;
typedef task_t* scheduling_t;
extern void SET_SW_BUG(os_sw_bugs_t bug_nr, os_sw_bugs_function_t task_nr);
extern void Inc_current_time(void);
extern void OS_ResetCurrentTime(void);
extern void OS_GetCurrentTime(timebig_t* time);

extern void OS_TaskSaveTaskEnvironment(task_t* task);
extern void OS_TASK_RESTORETASK_ENVIRONMENT(task_t* task);
extern void OS_TASK_RESTORE_SYSTEM_STACK(uint8* system_stack_ptr);
extern void OS_TASK_SAVE_SYSTEM_STACK(uint8* system_stack_ptr);
extern void OS_Task_InitTaskEnvironment(task_t* task);
extern void OS_Task_DeleteTaskEnvironment(task_t* task);
extern task_t* TASK_PTR[(10)];

typedef timebig_t scheduler_time_t;

#define os_SaveTaskPtr(task_ptr,task_name) (TASK_PTR[(task_name)] = (task_ptr))
#define os_GetTaskPtr(task_name) ((task_t*) TASK_PTR[(task_name)])
# 11 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_sim\\lld_global.h" 2

extern void LLF_SAVE_TASK_STACK(unsigned_char_t* StackPointer);

extern void LLF_SAVE_REGISTERS(uint32 r0, uint32 r1, uint32 r2, uint32 r3);

extern void LLF_RESTORE_TASK_STACK(unsigned_char_t* StackPointer);

extern void LLF_RESTORE_REGISTERS(task_t* task);

extern void LLF_RESTORE_SYSTEM_STACK(uint8* system_stack_ptr);

extern void LLF_SAVE_SYSTEM_STACK(uint8* system_stack_ptr);

extern void LLF_CLEAR_ALL_GP_REGISTERS(void);

extern void LLF_PERFORM_RAM_CHECK(void);
# 9 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_firstinc.h" 2



# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_user_code\\led.h" 1

#define _LED_H_ 
# 40 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_user_code\\led.h"
typedef enum
{
  LED1 = 0,
  LED2 = 1,
  LED3 = 2,
  LED4 = 3
} led_t;

extern void USER_LED_INIT(led_t Led);
extern void USER_LED_ON(led_t Led);
extern void USER_LED_OFF(led_t Led);
extern void USER_LED_TOGGLE(led_t Led);
# 13 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_firstinc.h" 2

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_ram.h" 1

#define _OS_RAM_H_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_firstinc.h" 1
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_ram.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_stack.h" 1

#define _os_stack_h_ 

#define OS_STACK_SIZE 0x200u
extern void OS_StackChkPatternInit(void);
extern void OS_StackCheck(void);
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_ram.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_heap.h" 1

#define _os_heap_h_ 


#define HEAP_SIZE 10000
#define MIN_BLOCK_SIZE_HEAP 8


#define HEAP_OFFSET_FOR_SIZE 0
#define HEAP_OFFSET_FOR_USED_SIZE 4
#define HEAP_OFFSET_FOR_CHUNK 8



extern void* OS_Calloc(uint32 num, uint32 size);
extern void* OS_Realloc(void* ptr_old, uint32 size_new);
extern void* OS_Malloc(uint32 size);
extern void OS_Free(void* ptr);
# 7 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_ram.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_main.h" 1

#define _os_main_h_ 
#define os_init 0
#define os_running 1
#define os_shutdown 2
extern void OS_StateHandler(void);
# 8 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_ram.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_task_config.h" 1
# 9 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_ram.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_task_common.h" 1
# 10 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_ram.h" 2

extern unsigned_char_t HEAP[10000];


extern volatile os_sw_bugs_t OS_SW_BUG[15];
extern volatile uint32 OS_STATE;
extern volatile uint32 VAR_HARDFAULT_STATUS_REG;
extern volatile uint32 VAR_MEM_MANAG_FAULT_STATUS_REG ;
extern volatile uint32 VAR_USAGE_FAULT_STATUS_REG ;
extern volatile uint32 VAR_FAULT_STATUS_REG ;
extern volatile uint32 VAR_MEM_FAULT_ADDR_REG ;
extern volatile uint32 VAR_BUS_FAULT_ADDR_REG ;
extern volatile uint32 VAR_AUX_FAULT_STATUS_REG;
extern volatile uint32 VAR_BUS_FAULT_STATUS_REG;
extern volatile uint32 LINK_REGISTER_HANDLER;
extern volatile uint32 BACKUP_SYSTICK_CURRENT_VAL_REG;
extern volatile uint32 DBG_RLD_VALUE;
extern volatile uint32 DBG_CURR_VAL;
extern volatile uint32 DBG_CTRL_VALUE;
extern volatile uint32 DBG_CALIB_VALUE;
extern volatile uint32 TASK1_CALL_NR;
extern volatile uint32 TASK2_CALL_NR;
extern volatile uint32 TASK3_CALL_NR;
extern volatile uint32 TASK4_CALL_NR;

extern volatile uint32* STACK_ADDR;
extern volatile uint32 STACK_POS;
extern volatile uint32 STACK_USAGE_PERCENT;
extern unsigned_char_t TASK_STACK[(10)][2000];
extern scheduler_time_t LAST_CURRENT_TIME;
extern scheduling_t TASK_SCHEDULING_QUEUE[(10)];
extern scheduling_t* RUNNING_SCHEDULING_QUEUE_ENTRY;
extern task_t TASK_RUN_QUEUE[(10)];
extern task_t RUNNING_TASK[1];
extern task_t TASK_IDLE_QUEUE[1];
extern unsigned_char_t bTASK_QUEUE_INITIALIZED;
extern task_t TASK_0_VAR, TASK_1_VAR, TASK_2_VAR, TASK_3_VAR;
extern task_group_t TASK_GROUP_1, TASK_GROUP_2, TASK_GROUP_3, TASK_GROUP_4, TASK_GROUP_5;
extern task_t* TASK_TRANSITION_REJECTED_TASK_ADDR;
extern task_state_t TASK_TRANSITION_REJECTED_STATE;
extern task_state_t TASK_TRANSITION_CURRENT_STATE;
extern volatile void* SAVED_STACK_POINTER;
extern volatile uint8 SYSTEM_STATE_ACCEPTED;
# 15 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_firstinc.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_ram_stack.h" 1

#define _OS_RAM_STACK_H_ 
# 12 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\..\\os_base\\os_ram_stack.h"
extern unsigned_char_t OS_MAIN_STACK[0x200u];
# 16 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_firstinc.h" 2
# 2 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\os_sim_main.c" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_main.h" 1
# 3 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\os_sim_main.c" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_task_scheduler.h" 1

#define _os_task_scheduler_h_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_firstinc.h" 1
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_task_scheduler.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_task_common.h" 1
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_task_scheduler.h" 2

#define Task_0_ptr 0
#define Task_1_ptr 1
#define Task_2_ptr 2
#define Task_3_ptr 3

#define OS_SaveTaskPtr(task_ptr,Task_n_ptr) 



extern void OS_StartTask(task_t* task, scheduling_t* scheduling_task);
extern void OS_ActivateTask(task_t* task);
extern void OS_SleepTask(task_t* task, timebig_t usec, scheduling_t* scheduling_task_ptr);
extern void OS_InitTask(
   task_t* task,
   func_p_t TaskFunction,
   unsigned_char_t AllowedInstances,
   unsigned_char_t IdleTask,
   task_group_t* p_task_group,
   unsigned_char_t* pStackAddr,
   unsigned_int32_t uStackSize,
   privilige_mode_t privilige_mode,
   CoreID_t core,
   unsigned_char_t default_prio
);
extern void ISR_TASK_DISPATCH(void);
extern void OS_InitTasks(void);
extern unsigned_char_t task_state_request(void* task, task_state_t requested_state);
extern void OS_ActivateDispatcher(void);
extern void OS_TerminateTask(task_t* task, scheduling_t* scheduling_task);
extern void OS_TaskDispatcher(void);
extern void OS_CreateTask(task_t* task);
# 4 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\os_sim_main.c" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_exception_isr_handler.h" 1

#define _os_exception_isr_handler_h_ 
extern void OS_Exception_RESET(void);
extern void OS_Exception_NMI(void);
extern void OS_Exception_HARDFAULT(void);
extern void OS_Exception_MEM_MANAG_FAULT(void);
extern void OS_Exception_BUS_FAULT(void);
extern void OS_Exception_USAGE_FAULT(void);

extern void OS_Exception_SVC(void);
extern void OS_Exception_DEBUG(void);

extern void OS_Exception_PendSV(void);
extern void OS_Exception_Systick(void);
extern void OS_Exception_IRQ(void);
extern void OS_ISRHANDLERC0(uint32 svc_number);
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\os_sim_main.c" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\..\\os_base\\os_start_os.h" 1

#define _os_startos_h_ 
extern void OS_StartOs(void);
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\os_sim_main.c" 2

# 1 "d:\\programm\\mingw\\include\\stdio.h" 1 3
# 16 "d:\\programm\\mingw\\include\\stdio.h" 3
#define _STDIO_H_ 


# 1 "d:\\programm\\mingw\\include\\_mingw.h" 1 3
# 23 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MINGW_H 
# 34 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MINGW32_VERSION 3021001L
#define __MINGW32_MAJOR_VERSION 3
#define __MINGW32_MINOR_VERSION 21
#define __MINGW32_PATCHLEVEL 1



       
# 42 "d:\\programm\\mingw\\include\\_mingw.h" 3
# 82 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __CRT_GLOB_USE_MSVCRT__ 0x0001




#define __CRT_GLOB_USE_MINGW__ 0x0002
# 117 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __CRT_GLOB_USE_SINGLE_QUOTE__ 0x0010
#define __CRT_GLOB_BRACKET_GROUPS__ 0x0020
#define __CRT_GLOB_CASE_SENSITIVE__ 0x0040
# 128 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __CRT_GLOB_ESCAPE_CHAR__ (char)(127)





#define __MINGW_ANSI_STDIO__ 0x0000000000000001ULL




#define __MINGW_LC_EXTENSIONS__ 0x0000000000000050ULL
#define __MINGW_LC_MESSAGES__ 0x0000000000000010ULL
#define __MINGW_LC_ENVVARS__ 0x0000000000000040ULL




#undef __attribute__
# 192 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MINGW_IMPORT extern __attribute__ ((__dllimport__))





#define _CRTIMP 


#define __DECLSPEC_SUPPORTED 
# 221 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __int64 long long


#define __int32 long


#define __int16 short


#define __int8 char


#define __small char


#define __hyper long long
# 250 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MINGW_GNUC_PREREQ(major,minor) (__GNUC__ > (major) || (__GNUC__ == (major) && __GNUC_MINOR__ >= (minor)))
# 265 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define _EXTERN_C extern
#define _BEGIN_C_DECLS 
#define _END_C_DECLS 




#define __CRT_INLINE extern __inline__
# 282 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define _CRTALIAS __CRT_INLINE __attribute__((__always_inline__))
#define __CRT_ALIAS __CRT_INLINE __attribute__((__always_inline__))
# 297 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __JMPSTUB__(__BUILD_HINT__) 
#define __LIBIMPL__(__BUILD_HINT__) 





#define __UNUSED_PARAM(x) x __attribute__ ((__unused__))






#define __MINGW_ATTRIB_NORETURN __attribute__ ((__noreturn__))
#define __MINGW_ATTRIB_CONST __attribute__ ((__const__))






#define __MINGW_ATTRIB_MALLOC __attribute__ ((__malloc__))
#define __MINGW_ATTRIB_PURE __attribute__ ((__pure__))
# 330 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MINGW_ATTRIB_NONNULL(arg) __attribute__ ((__nonnull__ (arg)))





#define __MINGW_ATTRIB_DEPRECATED __attribute__ ((__deprecated__))





#define __MINGW_NOTHROW __attribute__ ((__nothrow__))
# 353 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __MSVCRT_VERSION__ 0x0600
# 373 "d:\\programm\\mingw\\include\\_mingw.h" 3
#define __USE_MINGW_ANSI_STDIO 1
# 20 "d:\\programm\\mingw\\include\\stdio.h" 2 3


#define __need_size_t 
#define __need_NULL 
#define __need_wchar_t 
#define __need_wint_t 
# 1 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 1 3 4
# 184 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 






#define __size_t 





typedef unsigned int size_t;
# 234 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_size_t
# 263 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 290 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 324 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
typedef short unsigned int wchar_t;
# 343 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_wchar_t




#define _WINT_T 




typedef short unsigned int wint_t;

#undef __need_wint_t
# 397 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 27 "d:\\programm\\mingw\\include\\stdio.h" 2 3
#define __need___va_list 
# 1 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stdarg.h" 1 3 4
# 34 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stdarg.h" 3 4
#undef __need___va_list




#define __GNUC_VA_LIST 
typedef __builtin_va_list __gnuc_va_list;
# 29 "d:\\programm\\mingw\\include\\stdio.h" 2 3




#define _IOREAD 1
#define _IOWRT 2
#define _IORW 0x0080






#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2


#define EOF (-1)







#define FILENAME_MAX (260)






#define FOPEN_MAX (20)


#define TMP_MAX 32767






#define _P_tmpdir "\\"



#define _wP_tmpdir L"\\"







#define L_tmpnam (16)

#define _IOFBF 0x0000
#define _IOLBF 0x0040
#define _IONBF 0x0004

#define _IOMYBUF 0x0008
#define _IOEOF 0x0010
#define _IOERR 0x0020
#define _IOSTRG 0x0040







#define BUFSIZ 512





#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2





#define __VALIST __gnuc_va_list
# 129 "d:\\programm\\mingw\\include\\stdio.h" 3
#define _FILE_DEFINED 
typedef struct _iobuf
{
 char* _ptr;
 int _cnt;
 char* _base;
 int _flag;
 int _file;
 int _charbuf;
 int _bufsiz;
 char* _tmpfname;
} FILE;
# 155 "d:\\programm\\mingw\\include\\stdio.h" 3
extern __attribute__ ((__dllimport__)) FILE _iob[];



#define stdin (&_iob[STDIN_FILENO])
#define stdout (&_iob[STDOUT_FILENO])
#define stderr (&_iob[STDERR_FILENO])






 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fopen (const char*, const char*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) freopen (const char*, const char*, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fflush (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fclose (FILE*);

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) remove (const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) rename (const char*, const char*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) tmpfile (void);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) tmpnam (char*);
# 190 "d:\\programm\\mingw\\include\\stdio.h" 3
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) setvbuf (FILE*, char*, int, size_t);

 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) setbuf (FILE*, char*);







#undef __mingw_stdio_redirect__
#define __mingw_stdio_redirect__(F) __cdecl __MINGW_NOTHROW __mingw_ ##F

extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_fprintf(FILE*, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_printf(const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_sprintf(char*, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_snprintf(char*, size_t, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vfprintf(FILE*, const char*, __gnuc_va_list);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vprintf(const char*, __gnuc_va_list);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vsprintf(char*, const char*, __gnuc_va_list);
extern int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __mingw_vsnprintf(char*, size_t, const char*, __gnuc_va_list);





#undef __mingw_stdio_redirect__
# 231 "d:\\programm\\mingw\\include\\stdio.h" 3
#define __mingw_stdio_redirect__ static __inline__ __cdecl __MINGW_NOTHROW
# 240 "d:\\programm\\mingw\\include\\stdio.h" 3
static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int fprintf (FILE *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int printf (const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vprintf( __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int sprintf (char *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int vfprintf (FILE *__stream, const char *__format, __gnuc_va_list __local_argv)
{
  return __mingw_vfprintf( __stream, __format, __local_argv );
}

static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int vprintf (const char *__format, __gnuc_va_list __local_argv)
{
  return __mingw_vprintf( __format, __local_argv );
}

static __inline__ __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
int vsprintf (char *__stream, const char *__format, __gnuc_va_list __local_argv)
{
  return __mingw_vsprintf( __stream, __format, __local_argv );
}
# 304 "d:\\programm\\mingw\\include\\stdio.h" 3
#undef __mingw_stdio_redirect__
#define __mingw_stdio_redirect__(F) __cdecl __MINGW_NOTHROW __msvcrt_ ##F

 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_fprintf(FILE*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_printf(const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_sprintf(char*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_vfprintf(FILE*, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_vprintf(const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) __msvcrt_vsprintf(char*, const char*, __gnuc_va_list);

#undef __mingw_stdio_redirect__



 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _snprintf (char*, size_t, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vsnprintf (char*, size_t, const char*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vscprintf (const char*, __gnuc_va_list);
# 330 "d:\\programm\\mingw\\include\\stdio.h" 3
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) snprintf (char *, size_t, const char *, ...);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vsnprintf (char *, size_t, const char *, __gnuc_va_list);

int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vscanf (const char * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vfscanf (FILE * __restrict__, const char * __restrict__,
       __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vsscanf (const char * __restrict__,
       const char * __restrict__, __gnuc_va_list);







 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fscanf (FILE*, const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) scanf (const char*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) sscanf (const char*, const char*, ...);




 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetc (FILE*);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgets (char*, int, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputc (int, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputs (const char*, FILE*);
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) gets (char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) puts (const char*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ungetc (int, FILE*);







 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _filbuf (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _flsbuf (int, FILE*);



extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getc (FILE* __F)
{
  return (--__F->_cnt >= 0)
    ? (int) (unsigned char) *__F->_ptr++
    : _filbuf (__F);
}

extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putc (int __c, FILE* __F)
{
  return (--__F->_cnt >= 0)
    ? (int) (unsigned char) (*__F->_ptr++ = (char)__c)
    : _flsbuf (__c, __F);
}

extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getchar (void)
{
  return (--(&_iob[0])->_cnt >= 0)
    ? (int) (unsigned char) *(&_iob[0])->_ptr++
    : _filbuf ((&_iob[0]));
}

extern __inline__ int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putchar(int __c)
{
  return (--(&_iob[1])->_cnt >= 0)
    ? (int) (unsigned char) (*(&_iob[1])->_ptr++ = (char)__c)
    : _flsbuf (__c, (&_iob[1]));}
# 411 "d:\\programm\\mingw\\include\\stdio.h" 3
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fread (void*, size_t, size_t, FILE*);
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fwrite (const void*, size_t, size_t, FILE*);





 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fseek (FILE*, long, int);
 long __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ftell (FILE*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) rewind (FILE*);
# 454 "d:\\programm\\mingw\\include\\stdio.h" 3
typedef long long fpos_t;




 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetpos (FILE*, fpos_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fsetpos (FILE*, const fpos_t*);





 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) feof (FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ferror (FILE*);







#define feof(__F) ((__F)->_flag & _IOEOF)
#define ferror(__F) ((__F)->_flag & _IOERR)


 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) clearerr (FILE*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) perror (const char*);
# 628 "d:\\programm\\mingw\\include\\stdio.h" 3
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fwprintf (FILE*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wprintf (const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _snwprintf (wchar_t*, size_t, const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vfwprintf (FILE*, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vwprintf (const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vsnwprintf (wchar_t*, size_t, const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _vscwprintf (const wchar_t*, __gnuc_va_list);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fwscanf (FILE*, const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wscanf (const wchar_t*, ...);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) swscanf (const wchar_t*, const wchar_t*, ...);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetwc (FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputwc (wchar_t, FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ungetwc (wchar_t, FILE*);
# 649 "d:\\programm\\mingw\\include\\stdio.h" 3
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fgetws (wchar_t*, int, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) fputws (const wchar_t*, FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getwc (FILE*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) getwchar (void);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _getws (wchar_t*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putwc (wint_t, FILE*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _putws (const wchar_t*);
 wint_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) putwchar (wint_t);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfdopen(int, const wchar_t *);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfopen (const wchar_t*, const wchar_t*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfreopen (const wchar_t*, const wchar_t*, FILE*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wfsopen (const wchar_t*, const wchar_t*, int);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wtmpnam (wchar_t*);
 wchar_t* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wtempnam (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wrename (const wchar_t*, const wchar_t*);
 int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wremove (const wchar_t*);
 void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wperror (const wchar_t*);
 FILE* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _wpopen (const wchar_t*, const wchar_t*);



int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) snwprintf (wchar_t* s, size_t n, const wchar_t* format, ...);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __gnuc_va_list arg);





int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vwscanf (const wchar_t * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vfwscanf (FILE * __restrict__,
         const wchar_t * __restrict__, __gnuc_va_list);
int __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) vswscanf (const wchar_t * __restrict__,
         const wchar_t * __restrict__, __gnuc_va_list);


#define _WSTDIO_DEFINED 
# 711 "d:\\programm\\mingw\\include\\stdio.h" 3

# 8 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\os_sim_main.c" 2
# 1 "d:\\programm\\mingw\\include\\time.h" 1 3
# 33 "d:\\programm\\mingw\\include\\time.h" 3
#define _TIME_H 







#define CLOCKS_PER_SEC ((clock_t)(1000))
#define CLK_TCK CLOCKS_PER_SEC
# 51 "d:\\programm\\mingw\\include\\time.h" 3
#define __need_time_t 
#define __need_struct_timespec 
# 1 "d:\\programm\\mingw\\include\\parts\\time.h" 1 3
# 64 "d:\\programm\\mingw\\include\\parts\\time.h" 3
   typedef long __time32_t;
   typedef long long __time64_t;
# 74 "d:\\programm\\mingw\\include\\parts\\time.h" 3
    typedef __time32_t time_t;
# 87 "d:\\programm\\mingw\\include\\parts\\time.h" 3
#define __have_typedef_time_t 1
# 105 "d:\\programm\\mingw\\include\\parts\\time.h" 3
struct timespec
{



  union
  {



    time_t tv_sec;
    __time32_t __tv32_sec;
    __time64_t __tv64_sec;
  };
  long tv_nsec;
};
#define __struct_timespec_defined 1
# 54 "d:\\programm\\mingw\\include\\time.h" 2 3




#define __need_NULL 
#define __need_wchar_t 
#define __need_size_t 
# 1 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 1 3 4
# 234 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_size_t
# 343 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 397 "d:\\programm\\mingw\\lib\\gcc\\mingw32\\4.9.3\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 62 "d:\\programm\\mingw\\include\\time.h" 2 3




typedef long clock_t;






struct tm
{
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;

};
#define _TM_DEFINED 




 clock_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) clock (void);

 time_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) time (time_t*);
 double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) difftime (time_t, time_t);
 time_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) mktime (struct tm*);
# 108 "d:\\programm\\mingw\\include\\time.h" 3
 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) asctime (const struct tm*);

 char* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) ctime (const time_t*);
 struct tm* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) gmtime (const time_t*);
 struct tm* __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) localtime (const time_t*);


 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strftime (char*, size_t, const char*, const struct tm*);
# 213 "d:\\programm\\mingw\\include\\time.h" 3
extern __attribute__ ((__dllimport__)) int daylight;
extern __attribute__ ((__dllimport__)) long timezone;
extern __attribute__ ((__dllimport__)) char *tzname[2];
# 257 "d:\\programm\\mingw\\include\\time.h" 3
 size_t __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);
#define _WTIME_DEFINED 



# 9 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_sim\\os_sim_main.c" 2

int main(int argc, char* argv[])
{

   unsigned int i = 0;
   time_t t = time(0);

   OS_StackChkPatternInit();
   OS_StartOs();
   while(i < 1e8)
   {

      OS_StateHandler();
      i++;
   }

   t = time(0) - t;
   printf("Zeit: %d",t);
   getchar();
   getchar();
   ((argc) = (argc));
   ((*argv) = (*argv));

   return 0;
}
