# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
# 1 "D:\\Programm\\MinGW\\bin//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 4
#define __GNUC_MINOR__ 9
#define __GNUC_PATCHLEVEL__ 3
#define __VERSION__ "4.9.3"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 12
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ short unsigned int
#define __WINT_TYPE__ short unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST16_TYPE__ short int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_FAST16_TYPE__ short unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_ABI_VERSION 1002
#define __SCHAR_MAX__ 127
#define __SHRT_MAX__ 32767
#define __INT_MAX__ 2147483647
#define __LONG_MAX__ 2147483647L
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __WCHAR_MAX__ 65535
#define __WCHAR_MIN__ 0
#define __WINT_MAX__ 65535
#define __WINT_MIN__ 0
#define __PTRDIFF_MAX__ 2147483647
#define __SIZE_MAX__ 4294967295U
#define __INTMAX_MAX__ 9223372036854775807LL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 18446744073709551615ULL
#define __UINTMAX_C(c) c ## ULL
#define __SIG_ATOMIC_MAX__ 2147483647
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __INT8_MAX__ 127
#define __INT16_MAX__ 32767
#define __INT32_MAX__ 2147483647
#define __INT64_MAX__ 9223372036854775807LL
#define __UINT8_MAX__ 255
#define __UINT16_MAX__ 65535
#define __UINT32_MAX__ 4294967295U
#define __UINT64_MAX__ 18446744073709551615ULL
#define __INT_LEAST8_MAX__ 127
#define __INT8_C(c) c
#define __INT_LEAST16_MAX__ 32767
#define __INT16_C(c) c
#define __INT_LEAST32_MAX__ 2147483647
#define __INT32_C(c) c
#define __INT_LEAST64_MAX__ 9223372036854775807LL
#define __INT64_C(c) c ## LL
#define __UINT_LEAST8_MAX__ 255
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 65535
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 4294967295U
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 18446744073709551615ULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 127
#define __INT_FAST16_MAX__ 32767
#define __INT_FAST32_MAX__ 2147483647
#define __INT_FAST64_MAX__ 9223372036854775807LL
#define __UINT_FAST8_MAX__ 255
#define __UINT_FAST16_MAX__ 65535
#define __UINT_FAST32_MAX__ 4294967295U
#define __UINT_FAST64_MAX__ 18446744073709551615ULL
#define __INTPTR_MAX__ 2147483647
#define __UINTPTR_MAX__ 4294967295U
#define __GCC_IEC_559 2
#define __GCC_IEC_559_COMPLEX 2
#define __FLT_EVAL_METHOD__ 2
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859812e+38F
#define __FLT_MIN__ 1.17549435082228750797e-38F
#define __FLT_EPSILON__ 1.19209289550781250000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.79769313486231570815e+308L)
#define __DBL_MIN__ ((double)2.22507385850720138309e-308L)
#define __DBL_EPSILON__ ((double)2.22044604925031308085e-16L)
#define __DBL_DENORM_MIN__ ((double)4.94065645841246544177e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 64
#define __LDBL_DIG__ 18
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 21
#define __LDBL_MAX__ 1.18973149535723176502e+4932L
#define __LDBL_MIN__ 3.36210314311209350626e-4932L
#define __LDBL_EPSILON__ 1.08420217248550443401e-19L
#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ _
#define __GNUC_GNU_INLINE__ 1
#define __NO_INLINE__ 1
#define __STRICT_ANSI__ 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 1
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 1
#define __GCC_ATOMIC_SHORT_LOCK_FREE 1
#define __GCC_ATOMIC_INT_LOCK_FREE 1
#define __GCC_ATOMIC_LONG_LOCK_FREE 1
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 1
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 2
#define __SIZEOF_WINT_T__ 2
#define __SIZEOF_PTRDIFF_T__ 4
#define __i386 1
#define __i386__ 1
#define __ATOMIC_HLE_ACQUIRE 65536
#define __ATOMIC_HLE_RELEASE 131072
#define __tune_i386__ 1
#define __code_model_32__ 1
#define _X86_ 1
#define __stdcall __attribute__((__stdcall__))
#define __fastcall __attribute__((__fastcall__))
#define __thiscall __attribute__((__thiscall__))
#define __cdecl __attribute__((__cdecl__))
#define __GXX_MERGED_TYPEINFO_NAMES 0
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __MSVCRT__ 1
#define __MINGW32__ 1
#define _WIN32 1
#define __WIN32 1
#define __WIN32__ 1
#define __WINNT 1
#define __WINNT__ 1
#define _INTEGRAL_MAX_BITS 64
#define __declspec(x) __attribute__((x))
#define __DECIMAL_BID_FORMAT__ 1
# 1 "<command-line>"
#define CFG_PROCESSOR 3
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 1

#define _os_firstinc_h_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_base_types.h" 1

#define _BASE_TYPES_H_ 

#define INTEGER_LLP64_IL32P64 1
#define INTEGER_LP64_I32LP64 2
#define INTEGER_ILP64 3
#define INTEGER_SILP64 4

#define CPP_VERSION_NONE 0
#define CPP_VERSION_1998 1
#define CPP_VERSION_2003 2
#define CPP_VERSION_2007 3
#define CPP_VERSION_2011 4
#define ISO_CPP_VERSION CPP_VERSION_1998

#define INTEGER_MODEL INTEGER_LLP64_IL32P64
# 29 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_base_types.h"
typedef unsigned char unsigned_char_t;
typedef unsigned char unsigned_int8_t;
typedef unsigned char uint8;
typedef unsigned short unsigned_int16_t;
typedef unsigned short uint16;
typedef unsigned long unsigned_int32_t;
typedef unsigned long uint32;
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_common.h" 1

#define _os_common_h_ 



#define False 0
#define True 1
#define Accepted 1
#define Rejected 0
#define Local static
#define Local_inline static __inline__
#define Global_inline __inline__
#define ReferenceUnusedParameter(x) ((x) = (x))


#define cMCU_SIMULATION 1
#define cMCU_POWERPC 2
#define cMCU_X86 3
#define cMCU_CORTEX_M4 4


#define NR_OF_CORES 1
# 35 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_common.h"
#define DisableInterrupts() 
#define EnableInterrupts() 
#define Privilige_level_save_current() 
#define Privilige_level_enter_kernel_mode() 
#define Privilige_level_restore_saved() 
#define HaltMcu() 
# 49 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_common.h"
enum os_sw_bugs_e
{
   os_bug_no_bug = 0,
   os_bug_taskstate_request_denied,
   os_bug_null_pointer,
   os_bug_task_max_wait_time_reached,
   os_bug_Task_unspecified,
   os_bug_exception_UndefInstruction,
   os_bug_exception_AbortPrefetch,
   os_bug_exception_AbortData
};
typedef enum os_sw_bugs_e os_sw_bugs_t;
enum os_sw_bugs_function_e
{
   Func_NoFunction = 0,
   Func_SaveTaskEnvironment,
   Func_RestoreTaskEnvironment,
   Func_CreateTaskEnvironment,
   Func_DeleteTaskEnvironment,
   Func_StartTask,
   Func_PreemptTask,
   Func_TerminateTask,
   Func_TaskScheduler,
   Func_InitTask,
   Func_ActivateTask,
   Func_TaskStateRequest,
   Func_os_exception
};
typedef enum os_sw_bugs_function_e os_sw_bugs_function_t;



extern void OS_SET_SW_BUG(os_sw_bugs_t bug_nr, os_sw_bugs_function_t task_func_nr);

typedef void (*func_ptr_t)(void);
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 2

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 1

#define _lld_global_h_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_core.h" 1

#define _lld_core_h_ 
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_firstinc.h" 1
# 4 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_core.h" 2
enum CoreID_e
{
   Core0 = 0,
   Core1,
   Core2,
   Core3
};
typedef enum CoreID_e CoreID_t;

extern CoreID_t Get_core_id(void);
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_adc.h" 1

#define _lld_adc_h_ 
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_can.h" 1

#define _lld_can_h_ 
# 7 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_gpio.h" 1

#define _lld_gpio_h_ 
# 8 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_interrupt.h" 1

#define _lld_interrupt_h_ 


#define os_interrupt_swi_1 asm("swi 1")
#define os_interrupt_swi_2 asm("swi 2")
#define os_interrupt_swi_3 asm("swi 3")
#define os_interrupt_swi_4 asm("swi 4")
#define os_interrupt_swi_5 asm("swi 5")

extern void LLF_INT_DISABLE(void);
extern void LLF_INT_ENABLE(void);
extern void LLF_DISABLE_INTERRUPTS_ALL_CORES(void);
# 9 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_mmu.h" 1

#define _lld_mmu_h_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 1
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_mmu.h" 2
extern void LLF_SMPU_DISABLE(void);
extern void LLF_CMPU_DISABLE(void);
extern void LLF_SMPU_ENABLE(void);
extern void LLF_CMPU_ENABLE(void);
extern void LLF_SMPU_SWITCH_OFF_ALL_REGIONS(void);
extern void LLF_CMPU_SWITCH_OFF_ALL_REGIONS(void);
extern void LLF_MMU_SET_REGION(CoreID_t core_id, void* startAddr, void* endAddr);
# 10 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_timer.h" 1

#define _lld_timer_h_ 

extern uint32 LLF_UP_CNT_TIMER_32(void);
extern void LLF_TCMP1_CONFIG(void);
extern void LLF_ADD_2_TCMP(unsigned_int32_t value_us);
# 11 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_power.h" 1

#define _lld_power_h_ 

extern void LLF_MCU_SWITCH_OFF_POWER(void);
extern void LLF_MCU_RESET_POWER(void);
# 12 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_ram.h" 1

#define _lld_ram_h_ 

extern void LLF_CLEAR_ALL_RAM(void);
# 13 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_watchdog.h" 1

#define _lld_watchdog_h_ 

extern void LLF_SWITCH_OFF_WATCHDOG(void);
# 14 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 1

#define _os_task_common_h_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_config.h" 1

#define _os_task_config_h_ 


#define SchedulerFrequency (1.0e3)
#define MinTimeSlice_s (1.0/SchedulerFrequency)
#define MinTimeSlice_us ((1.0/SchedulerFrequency)*1e6)
#define Task_min_time (1e0)
#define NUMBER_OF_TASKS 5
#define MAX_RUN_QUEUE_SIZE (NUMBER_OF_TASKS)
#define MAX_RUN_PQUEUE_SIZE MAX_RUN_QUEUE_SIZE

#define TASK_STACK_SIZE 200


#define MS_PER_SEC (1000)
#define USE_STATIC_CREATED_TASKS True
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_init_task_system.h" 1

#define _os_init_task_system_h_ 
extern void OS_INIT_TASK_SYSTEM(void);
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 2

enum task_state_e
{
   Task_unspecified = 0,
   Task_suspended,
   Task_ready,
   Task_running
};
typedef enum task_state_e task_state_t;



typedef void (*func_p_void_void_t) (void);
typedef void (*func_p_t) (void* task);
typedef unsigned_char_t (*func_p_u8_t) (void* task);
typedef unsigned_char_t (*func_p_state_change_t)(void* task, task_state_t requested_task_state);
struct task_group_s
{
   unsigned_int32_t exe_time;
   unsigned_int32_t fair_exe_time;
};
typedef struct task_group_s task_group_t;

struct task_s
{
   unsigned active :1;
   unsigned task_queued :1;
   unsigned IdleTask :1;
   unsigned FREE :29;
   unsigned_char_t NrOfInsAllowed;
   unsigned_char_t NrOfInsActivated;
   unsigned_int32_t WaitActUntil;
   unsigned_int32_t wait_time;
   unsigned_int32_t TimeToPrioInc;
   unsigned_int32_t overwaittime_per_prio_inc_step;
   unsigned_int32_t max_allowed_wait_time;
   unsigned_int32_t exe_time;
   unsigned_char_t current_prio;
   unsigned_char_t default_prio;
   unsigned_int32_t task_number;
   func_p_t fp;
   func_p_state_change_t state_request;
   task_state_t task_state;
   task_group_t* task_group;

   unsigned_int32_t EAX;
   unsigned_int32_t EBX;
   unsigned_int32_t ECX;
   unsigned_int32_t EDX;
# 70 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h"
   unsigned_char_t* pStackPointer;
   unsigned_char_t* pStackPointerByMalloc;
   unsigned_char_t* pStackPointerStart;
   unsigned_int32_t StackSize;
   unsigned_char_t* pStackPointerEnd;
   unsigned_char_t task_kernel_mode;
};
typedef struct task_s task_t;
extern void SET_SW_BUG(os_sw_bugs_t bug_nr, os_sw_bugs_function_t task_nr);
extern void Inc_current_time(void);
extern unsigned_int32_t Get_current_time(void);

extern void OS_TASK_SAVETASK_ENVIRONMENT(task_t* task);
extern void OS_TASK_RESTORETASK_ENVIRONMENT(task_t* task);
extern void OS_TASK_RESTORE_SYSTEM_STACK(uint8* system_stack_ptr);
extern void OS_TASK_SAVE_SYSTEM_STACK(uint8* system_stack_ptr);
extern void OS_Task_InitTaskEnvironment(task_t* task);
extern void OS_Task_DeleteTaskEnvironment(task_t* task);
extern task_t* TASK_PTR[5];

typedef unsigned scheduler_time_t;

#define os_SaveTaskPtr(task_ptr,task_name) (TASK_PTR[(task_name)] = (task_ptr))
#define os_GetTaskPtr(task_name) ((task_t*) TASK_PTR[(task_name)])
# 15 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2

extern void LLF_SAVE_TASK_STACK(unsigned_char_t* StackPointer);

extern void LLF_SAVE_REGISTERS(task_t* task);

extern void LLF_RESTORE_TASK_STACK(unsigned_char_t* StackPointer);

extern void LLF_RESTORE_REGISTERS(task_t* task);

extern void LLF_RESTORE_SYSTEM_STACK(uint8* system_stack_ptr);

extern void LLF_SAVE_SYSTEM_STACK(uint8* system_stack_ptr);
# 8 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 2
# 2 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_common.h" 1
# 3 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.h" 1

#define _os_task_queue_h_ 



#define First_task (0)
#define Last_task (MAX_RUN_QUEUE_SIZE-1)

#define For_all_tasks_in_queue(var) for((var) = First_task; (var) <= Last_task; (var)++)

typedef void* link_list_t;
extern task_t* GetRunningTask(void);

extern void* AddToTaskQueue(task_t* task);
extern void AddToIdleTaskQueue(task_t* task);
extern void UpdateLinkList(void);
extern void* AddToLinkList(task_t* task);
extern void DeleteFromLinkList(unsigned_char_t element_nr);
extern void DeleteFromTaskQueue(task_t* task);
extern task_t* GetFromTaskQueue(link_list_t* link);
extern task_t* GetIdleTask(void);
extern link_list_t* GetFromLinkList(unsigned_char_t element_nr);
extern void SET_RUNNING_TASK(task_t* task);
extern void OS_INIT_TASK_QUEUE(void);
# 4 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_scheduler.h" 1

#define _os_task_scheduler_h_ 




#define Task_0_ptr 0
#define Task_1_ptr 1
#define Task_2_ptr 2
#define Task_3_ptr 3

#define OS_SaveTaskPtr(task_ptr,Task_n_ptr) 


typedef unsigned task_time_t;


extern void OS_ActivateTask(task_t* task);
extern void OS_SLEEPTASK(task_t* task, task_time_t millisec);
extern void OS_INIT_TASK(
   task_t* task,
   func_p_t TaskFunction,
   unsigned_char_t AllowedInstances,
   unsigned_char_t IdleTask,
   task_group_t* p_task_group,
   unsigned_char_t* pStackAddr,
   unsigned_int32_t uStackSize,
   unsigned_char_t KernelMode
);
extern void ISR_TASK_DISPATCH(void);
extern void OS_INIT_TASKS(void);
extern unsigned_char_t task_state_request(void* task, task_state_t requested_state);
extern void ISR_TASK_DISPATCH_C0(void);
extern void ISR_TASK_DISPATCH_C1(void);
extern void ISR_TASK_DISPATCH_C2(void);
extern void ISR_TASK_DISPATCH_C3(void);
extern void OS_ACTIVATE_DISPATCHER(void);
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c" 2

static task_t* pTASK_RUN_QUEUE[(5)];
static task_t TASK_RUN_QUEUE[(5)];
static task_t RUNNING_TASK[1];
static task_t TASK_IDLE_QUEUE[1];
static unsigned_char_t bTASK_QUEUE_INITIALIZED = 0;
# 37 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
void SET_RUNNING_TASK(task_t* task)
{
   if(task != 0)
   {
      (&RUNNING_TASK[0])->active = task->active;
      (&RUNNING_TASK[0])->task_queued = task->task_queued;
      (&RUNNING_TASK[0])->IdleTask = task->IdleTask;
      (&RUNNING_TASK[0])->FREE = task->FREE;
      (&RUNNING_TASK[0])->NrOfInsAllowed = task->NrOfInsAllowed;
      (&RUNNING_TASK[0])->NrOfInsActivated = task->NrOfInsActivated;
      (&RUNNING_TASK[0])->WaitActUntil = task->WaitActUntil;
      (&RUNNING_TASK[0])->wait_time = task->wait_time;
      (&RUNNING_TASK[0])->TimeToPrioInc = task->TimeToPrioInc;
      (&RUNNING_TASK[0])->overwaittime_per_prio_inc_step = task->overwaittime_per_prio_inc_step;
      (&RUNNING_TASK[0])->max_allowed_wait_time = task->max_allowed_wait_time;
      (&RUNNING_TASK[0])->exe_time = task->exe_time;
      (&RUNNING_TASK[0])->current_prio = task->current_prio;
      (&RUNNING_TASK[0])->default_prio = task->default_prio;
      (&RUNNING_TASK[0])->fp = task->fp;
      (&RUNNING_TASK[0])->state_request = task->state_request;
      (&RUNNING_TASK[0])->task_state = task->task_state;
      (&RUNNING_TASK[0])->task_group = task->task_group;

      (&RUNNING_TASK[0])->EAX = task->EAX;
      (&RUNNING_TASK[0])->EBX = task->EBX;
      (&RUNNING_TASK[0])->ECX = task->ECX;
      (&RUNNING_TASK[0])->EDX = task->EDX;
# 80 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
      (&RUNNING_TASK[0])->pStackPointer = task->pStackPointer;
      (&RUNNING_TASK[0])->pStackPointerByMalloc = task->pStackPointerByMalloc;
      (&RUNNING_TASK[0])->pStackPointerStart = task->pStackPointerStart;
      (&RUNNING_TASK[0])->StackSize = task->StackSize;
      (&RUNNING_TASK[0])->pStackPointerEnd = task->pStackPointerEnd;
   }
}


void OS_INIT_TASK_QUEUE(void)
{
   if(bTASK_QUEUE_INITIALIZED == 0)
   {
      unsigned_char_t element_nr = 0;
      while(element_nr < (5))
      {


         (pTASK_RUN_QUEUE[element_nr]) = (task_t*)0;
         OS_Task_InitTaskEnvironment(&TASK_RUN_QUEUE[element_nr]);
         element_nr++;
      }
      bTASK_QUEUE_INITIALIZED = 1;
   }
}
void* AddToTaskQueue(task_t* task)
{
   unsigned_char_t element_nr = 0;
   while( (element_nr < (5))
          &&((&TASK_RUN_QUEUE[element_nr])->task_queued == 1)
        )
   {
      element_nr++;
   }

   if( (element_nr < (5)) && ((&TASK_RUN_QUEUE[element_nr])->task_queued == 0) )
   {
      (&TASK_RUN_QUEUE[element_nr])->active = task->active;
      (&TASK_RUN_QUEUE[element_nr])->task_queued = 1;
      (&TASK_RUN_QUEUE[element_nr])->IdleTask = task->IdleTask;
      (&TASK_RUN_QUEUE[element_nr])->FREE = task->FREE;
      (&TASK_RUN_QUEUE[element_nr])->NrOfInsAllowed = task->NrOfInsAllowed;
      (&TASK_RUN_QUEUE[element_nr])->NrOfInsActivated = task->NrOfInsActivated;
      (&TASK_RUN_QUEUE[element_nr])->WaitActUntil = task->WaitActUntil;
      (&TASK_RUN_QUEUE[element_nr])->wait_time = task->wait_time;
      (&TASK_RUN_QUEUE[element_nr])->TimeToPrioInc = task->TimeToPrioInc;
      (&TASK_RUN_QUEUE[element_nr])->overwaittime_per_prio_inc_step = task->overwaittime_per_prio_inc_step;
      (&TASK_RUN_QUEUE[element_nr])->max_allowed_wait_time = task->max_allowed_wait_time;
      (&TASK_RUN_QUEUE[element_nr])->exe_time = task->exe_time;
      (&TASK_RUN_QUEUE[element_nr])->current_prio = task->current_prio;
      (&TASK_RUN_QUEUE[element_nr])->default_prio = task->default_prio;
      (&TASK_RUN_QUEUE[element_nr])->fp = task->fp;
      (&TASK_RUN_QUEUE[element_nr])->state_request = task->state_request;
      (&TASK_RUN_QUEUE[element_nr])->task_state = task->task_state;
      (&TASK_RUN_QUEUE[element_nr])->task_group = task->task_group;

      (&TASK_RUN_QUEUE[element_nr])->EAX = task->EAX;
      (&TASK_RUN_QUEUE[element_nr])->EBX = task->EBX;
      (&TASK_RUN_QUEUE[element_nr])->ECX = task->ECX;
      (&TASK_RUN_QUEUE[element_nr])->EDX = task->EDX;
# 155 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
      (&TASK_RUN_QUEUE[element_nr])->pStackPointer = task->pStackPointer;
      (&TASK_RUN_QUEUE[element_nr])->pStackPointerByMalloc = task->pStackPointerByMalloc;
      (&TASK_RUN_QUEUE[element_nr])->pStackPointerStart = task->pStackPointerStart;
      (&TASK_RUN_QUEUE[element_nr])->StackSize = task->StackSize;
      (&TASK_RUN_QUEUE[element_nr])->pStackPointerEnd = task->pStackPointerEnd;
   }
   return ((void*)&TASK_RUN_QUEUE[element_nr]);
}
void DeleteFromTaskQueue(task_t* task)
{
   task->active = 0 ;
   task->task_queued = 0 ;
   task->IdleTask = 0 ;
   task->FREE = 0 ;
   task->NrOfInsAllowed = 0 ;
   task->NrOfInsActivated = 0 ;
   task->WaitActUntil = 0 ;
   task->wait_time = 0 ;
   task->TimeToPrioInc = 0 ;
   task->overwaittime_per_prio_inc_step = 0 ;
   task->max_allowed_wait_time = 0 ;
   task->exe_time = 0 ;
   task->current_prio = 0 ;
   task->default_prio = 0 ;
   task->fp = 0 ;
   task->state_request = 0 ;
   task->task_state = Task_unspecified;
   task->task_group = 0 ;

      task->EAX = 0 ;
      task->EBX = 0 ;
      task->ECX = 0 ;
      task->EDX = 0 ;
# 205 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
   task->pStackPointer = 0 ;
   task->pStackPointerByMalloc = 0 ;
   task->pStackPointerStart = 0 ;
   task->StackSize = 0 ;
   task->pStackPointerEnd = 0 ;
}
task_t* GetFromTaskQueue(link_list_t* link)
{
   return ((task_t*)link);
}
link_list_t* GetFromLinkList(unsigned_char_t element_nr)
{
   return ((link_list_t*)pTASK_RUN_QUEUE[element_nr]);
}

void DeleteFromLinkList(unsigned_char_t element_nr)
{
   pTASK_RUN_QUEUE[element_nr] = 0;
}
void* AddToLinkList(task_t* task)
{







   unsigned_char_t Add_successful = 0;
   unsigned_char_t index = 0;
   void* ret_val = 0;

   while( (index < (5))
           &&(Add_successful == 0))
   {
      if(pTASK_RUN_QUEUE[index] == 0)
      {
         pTASK_RUN_QUEUE[index] = task;
         Add_successful = 1;
         ret_val = &pTASK_RUN_QUEUE[index];
      }
      index++;
   }
   return ret_val;
}
void UpdateLinkList(void)
{

   unsigned_char_t dest = 0, src = 0;

   while (dest < (5))
   {
      if(pTASK_RUN_QUEUE[dest] == 0)
      {


         src = dest;
         while((src < (5))&&(pTASK_RUN_QUEUE[src]==0))
         {
            src++;
         }
         if((src < (5))&&(pTASK_RUN_QUEUE[src]!=0))
         {
            pTASK_RUN_QUEUE[dest] = pTASK_RUN_QUEUE[src];
            pTASK_RUN_QUEUE[src] = 0;
         }
      }
      dest++;
   }
}


task_t* GetIdleTask(void)
{
   return (&TASK_IDLE_QUEUE[0]);
}
void AddToIdleTaskQueue(task_t* task)
{

   if((&TASK_IDLE_QUEUE[0])->IdleTask == 0)
   {
      (&TASK_IDLE_QUEUE[0])->active = task->active ;
      (&TASK_IDLE_QUEUE[0])->task_queued = task->task_queued ;
      (&TASK_IDLE_QUEUE[0])->IdleTask = task->IdleTask ;
      (&TASK_IDLE_QUEUE[0])->FREE = task->FREE ;
      (&TASK_IDLE_QUEUE[0])->NrOfInsAllowed = task->NrOfInsAllowed ;
      (&TASK_IDLE_QUEUE[0])->NrOfInsActivated = task->NrOfInsActivated ;
      (&TASK_IDLE_QUEUE[0])->WaitActUntil = task->WaitActUntil ;
      (&TASK_IDLE_QUEUE[0])->wait_time = task->wait_time ;
      (&TASK_IDLE_QUEUE[0])->TimeToPrioInc = task->TimeToPrioInc ;
      (&TASK_IDLE_QUEUE[0])->overwaittime_per_prio_inc_step = task->overwaittime_per_prio_inc_step;
      (&TASK_IDLE_QUEUE[0])->max_allowed_wait_time = task->max_allowed_wait_time;
      (&TASK_IDLE_QUEUE[0])->exe_time = task->exe_time;
      (&TASK_IDLE_QUEUE[0])->current_prio = task->current_prio ;
      (&TASK_IDLE_QUEUE[0])->default_prio = task->default_prio ;
      (&TASK_IDLE_QUEUE[0])->fp = task->fp ;
      (&TASK_IDLE_QUEUE[0])->state_request = task->state_request ;
      (&TASK_IDLE_QUEUE[0])->task_state = Task_ready ;
      (&TASK_IDLE_QUEUE[0])->task_group = task->task_group ;

      (&TASK_IDLE_QUEUE[0])->EAX = task->EAX ;
      (&TASK_IDLE_QUEUE[0])->EBX = task->EBX ;
      (&TASK_IDLE_QUEUE[0])->ECX = task->ECX ;
      (&TASK_IDLE_QUEUE[0])->EDX = task->EDX ;
# 326 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
      (&TASK_IDLE_QUEUE[0])->pStackPointer = task->pStackPointer ;
      (&TASK_IDLE_QUEUE[0])->pStackPointerByMalloc = task->pStackPointerByMalloc;
      (&TASK_IDLE_QUEUE[0])->pStackPointerStart = task->pStackPointerStart;
      (&TASK_IDLE_QUEUE[0])->StackSize = task->StackSize ;
      (&TASK_IDLE_QUEUE[0])->pStackPointerEnd = task->pStackPointerEnd ;
   }
}
task_t* GetRunningTask(void)
{
   return (&RUNNING_TASK[0]);
}

void OS_INIT_TASK(
   task_t* task,
   func_p_t TaskFunction,
   unsigned_char_t AllowedInstances,
   unsigned_char_t IdleTask,
   task_group_t* p_task_group,
   unsigned_char_t* pStackAddr,
   unsigned_int32_t uStackSize,
   unsigned_char_t KernelMode
)
{
   if(task!=0)
   {
      task->active = 0;
      task->fp = TaskFunction;
      task->NrOfInsAllowed = AllowedInstances;
      task->task_group = p_task_group;
      task->NrOfInsActivated = 0;
      task->WaitActUntil = 0;
      task->task_kernel_mode = KernelMode;

      task->overwaittime_per_prio_inc_step = 1;
      task->max_allowed_wait_time = 100000;

      task->IdleTask = IdleTask;
      task->state_request = &task_state_request;


      if(IdleTask != 0)
      {
         task->task_state = Task_running;
      }
      else
      {
         task->state_request(task, Task_unspecified);
         task->state_request(task, Task_suspended);
      }
      if(uStackSize > 200)
      {
         uStackSize = 200;
      }


      task->pStackPointerByMalloc = pStackAddr;
      task->pStackPointerStart = pStackAddr;
      task->pStackPointerEnd = (unsigned_char_t*)pStackAddr + uStackSize - 1;
      task->StackSize = uStackSize;

      task->pStackPointer = task->pStackPointerEnd;
   }
   else
   {
      OS_SET_SW_BUG(os_bug_null_pointer, Func_InitTask);
   }
}
