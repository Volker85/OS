# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
# 1 "D:\\Programm\\MinGW\\bin//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 4
#define __GNUC_MINOR__ 9
#define __GNUC_PATCHLEVEL__ 3
#define __VERSION__ "4.9.3"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 12
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ short unsigned int
#define __WINT_TYPE__ short unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST16_TYPE__ short int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_FAST16_TYPE__ short unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_ABI_VERSION 1002
#define __SCHAR_MAX__ 127
#define __SHRT_MAX__ 32767
#define __INT_MAX__ 2147483647
#define __LONG_MAX__ 2147483647L
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __WCHAR_MAX__ 65535
#define __WCHAR_MIN__ 0
#define __WINT_MAX__ 65535
#define __WINT_MIN__ 0
#define __PTRDIFF_MAX__ 2147483647
#define __SIZE_MAX__ 4294967295U
#define __INTMAX_MAX__ 9223372036854775807LL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 18446744073709551615ULL
#define __UINTMAX_C(c) c ## ULL
#define __SIG_ATOMIC_MAX__ 2147483647
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __INT8_MAX__ 127
#define __INT16_MAX__ 32767
#define __INT32_MAX__ 2147483647
#define __INT64_MAX__ 9223372036854775807LL
#define __UINT8_MAX__ 255
#define __UINT16_MAX__ 65535
#define __UINT32_MAX__ 4294967295U
#define __UINT64_MAX__ 18446744073709551615ULL
#define __INT_LEAST8_MAX__ 127
#define __INT8_C(c) c
#define __INT_LEAST16_MAX__ 32767
#define __INT16_C(c) c
#define __INT_LEAST32_MAX__ 2147483647
#define __INT32_C(c) c
#define __INT_LEAST64_MAX__ 9223372036854775807LL
#define __INT64_C(c) c ## LL
#define __UINT_LEAST8_MAX__ 255
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 65535
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 4294967295U
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 18446744073709551615ULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 127
#define __INT_FAST16_MAX__ 32767
#define __INT_FAST32_MAX__ 2147483647
#define __INT_FAST64_MAX__ 9223372036854775807LL
#define __UINT_FAST8_MAX__ 255
#define __UINT_FAST16_MAX__ 65535
#define __UINT_FAST32_MAX__ 4294967295U
#define __UINT_FAST64_MAX__ 18446744073709551615ULL
#define __INTPTR_MAX__ 2147483647
#define __UINTPTR_MAX__ 4294967295U
#define __GCC_IEC_559 2
#define __GCC_IEC_559_COMPLEX 2
#define __FLT_EVAL_METHOD__ 2
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859812e+38F
#define __FLT_MIN__ 1.17549435082228750797e-38F
#define __FLT_EPSILON__ 1.19209289550781250000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.79769313486231570815e+308L)
#define __DBL_MIN__ ((double)2.22507385850720138309e-308L)
#define __DBL_EPSILON__ ((double)2.22044604925031308085e-16L)
#define __DBL_DENORM_MIN__ ((double)4.94065645841246544177e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 64
#define __LDBL_DIG__ 18
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 21
#define __LDBL_MAX__ 1.18973149535723176502e+4932L
#define __LDBL_MIN__ 3.36210314311209350626e-4932L
#define __LDBL_EPSILON__ 1.08420217248550443401e-19L
#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ _
#define __GNUC_GNU_INLINE__ 1
#define __NO_INLINE__ 1
#define __STRICT_ANSI__ 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 1
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 1
#define __GCC_ATOMIC_SHORT_LOCK_FREE 1
#define __GCC_ATOMIC_INT_LOCK_FREE 1
#define __GCC_ATOMIC_LONG_LOCK_FREE 1
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 1
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 2
#define __SIZEOF_WINT_T__ 2
#define __SIZEOF_PTRDIFF_T__ 4
#define __i386 1
#define __i386__ 1
#define __ATOMIC_HLE_ACQUIRE 65536
#define __ATOMIC_HLE_RELEASE 131072
#define __tune_i386__ 1
#define __code_model_32__ 1
#define _X86_ 1
#define __stdcall __attribute__((__stdcall__))
#define __fastcall __attribute__((__fastcall__))
#define __thiscall __attribute__((__thiscall__))
#define __cdecl __attribute__((__cdecl__))
#define __GXX_MERGED_TYPEINFO_NAMES 0
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __MSVCRT__ 1
#define __MINGW32__ 1
#define _WIN32 1
#define __WIN32 1
#define __WIN32__ 1
#define __WINNT 1
#define __WINNT__ 1
#define _INTEGRAL_MAX_BITS 64
#define __declspec(x) __attribute__((x))
#define __DECIMAL_BID_FORMAT__ 1
# 1 "<command-line>"
#define CFG_PROCESSOR 3
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 1

#define _OS_FIRSTINC_H_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_config.h" 1

#define _OS_CONFIG_H_ 


#define INTEGER_LLP64_IL32P64 1u
#define INTEGER_LP64_I32LP64 2u
#define INTEGER_ILP64 3u
#define INTEGER_SILP64 4u
#define INTEGER_MODEL INTEGER_LLP64_IL32P64


#define CPP_VERSION_NONE 0u
#define CPP_VERSION_1998 1u
#define CPP_VERSION_2003 2u
#define CPP_VERSION_2007 3u
#define CPP_VERSION_2011 4u
#define ISO_CPP_VERSION CPP_VERSION_1998


#define BIG_INT_SIZE 16u


#define NR_OF_CORES 1u



#define MCU_CLOCK_IN_HZ ((uint32)168000000u)

#define DYNAMIC_MEMORY_USED FALSE
#define LOOPTIME_IN_USEC ((uint32)10000u)


#define HEAP_SIZE 10000u
#define MIN_BLOCK_SIZE_HEAP 8u
#define HEAP_OFFSET_FOR_SIZE 0u
#define HEAP_OFFSET_FOR_USED_SIZE 4u
#define HEAP_OFFSET_FOR_CHUNK 8u


#define OS_STACK_SIZE 0x200u
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_base_types.h" 1

#define _OS_BASE_TYPES_H_ 
# 17 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_base_types.h"
typedef unsigned char unsigned_char_t;
typedef signed char signed_char_t;
typedef unsigned char unsigned_int8_t;
typedef signed char signed_int8_t;
typedef unsigned char uint8;
typedef signed char sint8;
typedef unsigned short unsigned_int16_t;
typedef signed short signed_int16_t;
typedef unsigned short uint16;
typedef signed short sint16;
typedef unsigned long unsigned_int32_t;
typedef signed long signed_int32_t;
typedef unsigned long uint32;
typedef signed long sint32;
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_common.h" 1

#define _OS_COMMON_H_ 



#define FALSE 0u
#define TRUE 1u
#define ACCEPTED 1u
#define REJECTED 0u
#define LOCAL static
#define LOCAL_INLINE static __inline__
#define GLOBAL_INLINE __inline__
#define REFERENCE_UNUSED_PARAMETER(x) ((x) = (x))


#define MCU_X86 3
#define MCU_CORTEX_M4 4


#define DWT_CTRL ((volatile uint32*)0xE0001000u)
#define DWT_CYCCNT ((volatile uint32*)0xE0001004u)
#define DWT_LAR ((volatile uint32*)0xE0001FB0u)
#define SCB_DEMCR ((volatile uint32*)0xE000EDFCu)


#define DISABLE_INTERRUPTS() 
#define ENABLE_INTERRUPTS() 
#define PRIVILIGE_LEVEL_SAVE_CURRENT() 
#define PRIVILIGE_LEVEL_ENTER_KERNEL_MODE() 
#define PRIVILIGE_LEVEL_RESTORE_SAVED() 
#define HALT_MCU() 
# 40 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_common.h"
enum os_sw_bugs_e
{
   E_OS_BUG_NO_BUG = 0,
   E_OS_BUG_TASKSTATE_REQUEST_DENIED,
   E_OS_BUG_NULL_POINTER,
   E_OS_BUG_TASK_MAX_WAIT_TIME_REACHED,
   E_OS_BUG_TASK_UNSPECIFIED,
   E_OS_BUG_EXCEPTION_UNDEFINSTRUCTION,
   E_OS_BUG_EXCEPTION_ABORTPREFETCH,
   E_OS_BUG_EXCEPTION_ABORTDATA,
   E_OS_BUG_RESET_EXIT_OR_SHUTDOWN_FAILED,
   E_OS_BUG_CRITICAL_STACK_USAGE,
   E_OS_BUG_SVC_NUMBER_MISSING
};
typedef enum os_sw_bugs_e os_sw_bugs_t;
typedef uint8 boolean_t;
enum os_sw_bugs_function_e
{
   E_FUNC_NOFUNCTION = 0,
   E_FUNC_SAVETASKENVIRONMENT,
   E_FUNC_RESTORETASKENVIRONMENT,
   E_FUNC_CREATETASKENVIRONMENT,
   E_FUNC_DELETETASKENVIRONMENT,
   E_FUNC_INITTASKENVIRONMENT,
   E_FUNC_STARTTASK,
   E_FUNC_PREEMPTTASK,
   E_FUNC_TERMINATETASK,
   E_FUNC_TASKSCHEDULER,
   E_FUNC_INITTASK,
   E_FUNC_ACTIVATETASK,
   E_FUNC_TASKSTATEREQUEST,
   E_FUNC_PREEMPT_TASK,
   E_FUNC_OS_EXCEPTION,
   E_FUNC_CREATETASK,
   E_FUNC_SHUTDOWN,
   E_FUNC_STACKCHECK,
   E_FUNC_ISRHANDLER
};
typedef enum os_sw_bugs_function_e os_sw_bugs_function_t;



extern void OS_SET_SW_BUG(os_sw_bugs_t bug_nr, os_sw_bugs_function_t task_func_nr);

typedef void (*func_ptr_t)(void);



typedef struct big_int_s
{







   uint8 number[16u];
} big_int;
extern void ASSIGN_NULL(big_int* leftOperand);
extern void ASSIGN(big_int* leftOperand, big_int* rightOperand);
extern void ASSIGN_UINT32(big_int* leftOperand, uint32 rightOperand);
extern boolean_t IS_GREATER_OR_EQUAL(big_int* Operand1, big_int* Operand2);
extern boolean_t IS_GREATER(big_int* Operand1, big_int* Operand2);
extern boolean_t IS_EQUAL(big_int* Operand1, big_int* Operand2);
extern boolean_t IS_LESS_OR_EQUAL(big_int* Operand1, big_int* Operand2);
extern boolean_t IS_LESS(big_int* Operand1, big_int* Operand2);
extern void INT_DIV(big_int* Quotient, big_int* Dividend, big_int* Divisor);
extern void INT_MUL(big_int* Produkt, big_int* Faktor1, big_int* Faktor2);
extern void INT_SUB(big_int* Differenz, big_int* Minuend, big_int* Subtrahend);
extern void INT_ADD(big_int* Summe, big_int* ErsterSummand, big_int* ZweiterSummand);
extern uint32 get_uint32_of_4_uint8(uint8* ptr);
extern void set_4_uint8_to_uint32(uint8* ptr, uint32 value);
# 7 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 2


# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 1

#define _LLD_GLOBAL_H_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_core.h" 1

#define _LLD_CORE_H_ 
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_firstinc.h" 1
# 4 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_core.h" 2
enum coreid_e
{
   E_CORE0 = 0,
   E_CORE1,
   E_CORE2,
   E_CORE3
};
typedef enum coreid_e coreid_t;

extern coreid_t OS_GET_CORE_ID(void);
extern void LLF_CHANGE_TO_UNPRIVILIGED_THREAD_MODE(void);

enum privilige_mode_e
{
   E_PRIVILIGEMODE_UNPRIVILIGED_THREAD_MODE = 0,
   E_PRIVILIGEMODE_PRIVILIGED_THREAD_MODE,
   E_PRIVILIGEMODE_PRIVILIGED_HANDLER_MODE
};
typedef enum privilige_mode_e privilige_mode_t;
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_interrupt.h" 1

#define _LLD_INTERRUPT_H_ 


#define OS_INTERRUPT_SWI_1 asm("swi 1")
#define OS_INTERRUPT_SWI_2 asm("swi 2")
#define OS_INTERRUPT_SWI_3 asm("swi 3")
#define OS_INTERRUPT_SWI_4 asm("swi 4")
#define OS_INTERRUPT_SWI_5 asm("swi 5")

extern void LLF_INT_DISABLE(void);
extern void LLF_INT_ENABLE(void);
extern void LLF_DISABLE_INTERRUPTS_ALL_CORES(void);
extern void LLF_WAIT_FOR_INTERRUPT(void);
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_mmu.h" 1

#define _LLD_MMU_H_ 


extern void LLF_MPU_DISABLE(void);
extern void LLF_MPU_ENABLE(void);
extern uint32 LLF_GET_MPU_PRESENT(void);
extern void LLF_MMU_SET_REGION(void* startAddr, void* endAddr);
# 7 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_timer.h" 1

#define _LLD_TIMER_H_ 
# 8 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_power.h" 1

#define _LLD_POWER_H_ 

extern void LLF_MCU_SWITCH_OFF_POWER(void);
extern void LLF_MCU_RESET_POWER(void);
# 9 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_ram.h" 1

#define _LLD_RAM_H_ 

extern void LLF_CLEAR_ALL_RAM(void);
# 10 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 1

#define _OS_TASK_COMMON_H_ 
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_firstinc.h" 1
# 4 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_config.h" 1

#define _OS_TASK_CONFIG_H_ 


#define TASK_MIN_TIME (1e0)
#define NUMBER_OF_TASKS 10u
#define MAX_RUN_QUEUE_SIZE (NUMBER_OF_TASKS)
#define MAX_RUN_PQUEUE_SIZE MAX_RUN_QUEUE_SIZE

#define TASK_STACK_SIZE 2000u


#define MS_PER_SEC 1000u
#define USE_STATIC_CREATED_TASKS TRUE
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_init_task_system.h" 1

#define _OS_INIT_TASK_SYSTEM_H_ 
extern void OS_INIT_TASK_SYSTEM(void);
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h" 2

enum task_state_e
{
   E_TASK_UNSPECIFIED = 0,
   E_TASK_SUSPENDED,
   E_TASK_READY,
   E_TASK_RUNNING
};
typedef enum task_state_e task_state_t;



typedef void (*func_p_void_void_t) (void);
typedef void (*func_p_t) (void* task);
typedef unsigned_char_t (*func_p_u8_t) (void* task);
typedef unsigned_char_t (*func_p_state_change_t)(void* task, task_state_t requested_task_state);
typedef big_int timebig_t;

struct task_group_s
{
   timebig_t exe_time;
   timebig_t fair_exe_time;
};
typedef struct task_group_s task_group_t;

struct task_s
{
   unsigned active :1;
   unsigned task_queued :1;
   unsigned idle_task :1;
   unsigned free :29;
   unsigned_char_t nr_of_ins_allowed;
   unsigned_char_t nr_of_ins_activated;
   timebig_t wait_act_until;
   timebig_t wait_time;
   timebig_t time_to_prio_inc;
   uint32 overwaittime_per_prio_inc_step;
   timebig_t max_allowed_wait_time;
   timebig_t exe_time;
   timebig_t start_time;
   unsigned_char_t current_prio;
   unsigned_char_t default_prio;
   unsigned_int32_t task_number;
   func_p_t fp;
   func_p_state_change_t state_request;
   task_state_t task_state;
   task_group_t* task_group;

   unsigned_int32_t eax;
   unsigned_int32_t ebx;
   unsigned_int32_t ecx;
   unsigned_int32_t edx;
# 73 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\..\\os_base\\os_task_common.h"
   unsigned_char_t* p_stack_pointer;
   unsigned_char_t* p_stack_pointer_by_malloc;
   unsigned_char_t* p_stack_pointer_start;
   unsigned_int32_t StackSize;
   unsigned_char_t* p_stack_pointer_end;
   privilige_mode_t privilige_mode;
};
typedef struct task_s task_t;
typedef task_t* scheduling_t;
extern void OS_RESET_CURRENT_TIME(void);
extern void OS_GET_CURRENT_TIME(timebig_t* time);

extern void OS_TASK_SAVE_TASK_ENVIRONMENT(task_t* task);
extern void OS_TASK_RESTORETASK_ENVIRONMENT(task_t* task);
extern void OS_TASK_RESTORE_SYSTEM_STACK(uint8* system_stack_ptr);
extern void OS_TASK_SAVE_SYSTEM_STACK(uint8* system_stack_ptr);
extern void OS_TASK_INIT_TASK_ENVIRONMENT(task_t* task);
extern void OS_TASK_DELETE_TASK_ENVIRONMENT(task_t* task);
extern task_t* TASK_PTR[(10u)];

typedef timebig_t scheduler_time_t;

#define OS_SAVE_TASK_PTR(task_ptr,task_name) (TASK_PTR[(task_name)] = (task_ptr))
#define OS_GET_TASK_PTR(task_name) ((task_t*) TASK_PTR[(task_name)])
# 11 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_sim\\lld_global.h" 2

extern void LLF_SAVE_TASK_STACK(unsigned_char_t* StackPointer);

extern void LLF_SAVE_REGISTERS(uint32 r0, uint32 r1, uint32 r2, uint32 r3);

extern void LLF_RESTORE_TASK_STACK(unsigned_char_t* StackPointer);

extern void LLF_RESTORE_REGISTERS(task_t* task);

extern void LLF_RESTORE_SYSTEM_STACK(uint8* system_stack_ptr);

extern void LLF_SAVE_SYSTEM_STACK(uint8* system_stack_ptr);

extern void LLF_CLEAR_ALL_GP_REGISTERS(void);

extern void LLF_PERFORM_RAM_CHECK(void);
# 10 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 2



# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_user_code\\led.h" 1

#define _LED_H_ 
# 40 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_user_code\\led.h"
typedef enum
{
   E_LED1 = 0,
   E_LED2 = 1,
   E_LED3 = 2,
   E_LED4 = 3
} led_t;

extern void USER_LED_INIT(led_t Led);
extern void USER_LED_ON(led_t Led);
extern void USER_LED_OFF(led_t Led);
extern void USER_LED_TOGGLE(led_t Led);
# 14 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 2

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_ram.h" 1

#define _OS_RAM_H_ 

# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_firstinc.h" 1
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_ram.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_stack.h" 1

#define _OS_STACK_H_ 
extern void OS_STACK_CHK_PATTERN_INIT(void);
extern void OS_STACK_CHECK(void);
# 6 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_ram.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_heap.h" 1

#define _OS_HEAP_H_ 

extern void* OS_CALLOC(uint32 num, uint32 size);
extern void* OS_REALLOC(void* ptr_old, uint32 size_new);
extern void* OS_MALLOC(uint32 size);
extern void OS_free(void* ptr);
# 7 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_ram.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_main.h" 1

#define _OS_MAIN_H_ 

extern void OS_STATE_HANDLER(void);
# 8 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_ram.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_task_config.h" 1
# 9 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_ram.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_task_common.h" 1
# 10 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_ram.h" 2

extern unsigned_char_t HEAP[10000u];


extern volatile os_sw_bugs_t OS_SW_BUG[15];
extern volatile uint32 OS_STATE;
extern volatile uint32 VAR_HARDFAULT_STATUS_REG;
extern volatile uint32 VAR_MEM_MANAG_FAULT_STATUS_REG ;
extern volatile uint32 VAR_USAGE_FAULT_STATUS_REG ;
extern volatile uint32 VAR_FAULT_STATUS_REG ;
extern volatile uint32 VAR_MEM_FAULT_ADDR_REG ;
extern volatile uint32 VAR_BUS_FAULT_ADDR_REG ;
extern volatile uint32 VAR_AUX_FAULT_STATUS_REG;
extern volatile uint32 VAR_BUS_FAULT_STATUS_REG;
extern volatile uint32 LINK_REGISTER_HANDLER;
extern volatile uint32 BACKUP_SYSTICK_CURRENT_VAL_REG;
extern volatile uint32 DBG_RLD_VALUE;
extern volatile uint32 DBG_CURR_VAL;
extern volatile uint32 DBG_CTRL_VALUE;
extern volatile uint32 DBG_CALIB_VALUE;
extern volatile uint32 TASK1_CALL_NR;
extern volatile uint32 TASK2_CALL_NR;
extern volatile uint32 TASK3_CALL_NR;
extern volatile uint32 TASK4_CALL_NR;

extern volatile uint32* STACK_ADDR;
extern volatile uint32 STACK_POS;
extern volatile uint32 STACK_USAGE_PERCENT;
extern unsigned_char_t TASK_STACK[(10u)][2000u];
extern scheduler_time_t LAST_CURRENT_TIME;
extern scheduling_t TASK_SCHEDULING_QUEUE[(10u)];
extern scheduling_t* RUNNING_SCHEDULING_QUEUE_ENTRY;
extern task_t TASK_RUN_QUEUE[(10u)];
extern task_t RUNNING_TASK[1];
extern task_t TASK_IDLE_QUEUE[1];
extern unsigned_char_t bTASK_QUEUE_INITIALIZED;
extern task_t TASK_0_VAR, TASK_1_VAR, TASK_2_VAR, TASK_3_VAR;
extern task_group_t TASK_GROUP_1, TASK_GROUP_2, TASK_GROUP_3, TASK_GROUP_4, TASK_GROUP_5;
extern task_t* TASK_TRANSITION_REJECTED_TASK_ADDR;
extern task_state_t TASK_TRANSITION_REJECTED_STATE;
extern task_state_t TASK_TRANSITION_CURRENT_STATE;
extern volatile void* SAVED_STACK_POINTER;
extern volatile uint8 SYSTEM_STATE_ACCEPTED;
extern timebig_t LOCAL_SYSTEM_TIME;
# 16 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_ram_stack.h" 1

#define _OS_RAM_STACK_H_ 
# 12 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\..\\os_base\\os_ram_stack.h"
extern unsigned_char_t OS_MAIN_STACK[0x200u];
# 17 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_firstinc.h" 2
# 2 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_common.h" 1
# 3 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.h" 1

#define _OS_TASK_QUEUE_H_ 



#define FIRST_TASK (0u)
#define LAST_TASK (MAX_RUN_QUEUE_SIZE-1u)

#define FOR_ALL_TASKS_IN_QUEUE(var) for((var) = FIRST_TASK; (var) <= LAST_TASK; (var)++)

extern task_t* GET_RUNNING_TASK(void);
extern task_t** GET_RUNNING_SCHEDULING_QUEUE_ELEMENT_PTR(void);

extern task_t* ADD_TO_TASK_QUEUE(task_t* task);
extern void ADD_TO_IDLE_TASK_QUEUE(task_t* task);
extern void DELETE_FROM_TASK_QUEUE(task_t* task);
extern task_t* GET_FROM_TASK_QUEUE(scheduling_t* scheduling_task_ptr);
extern task_t* GET_IDLE_TASK(void);
extern scheduling_t* GET_FROM_SCHEDULING_QUEUE(unsigned_char_t element_nr);
extern void DELETE_FROM_SCHEDULING_QUEUE(scheduling_t* scheduling_queue_element);
extern void ADD_TO_SCHEDULING_QUEUE(task_t* task);
extern void SET_RUNNING_TASK(task_t* task, scheduling_t* scheduling_task);
extern void OS_INIT_TASK_QUEUE(void);
# 4 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c" 2
# 1 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_scheduler.h" 1

#define _OS_TASK_SCHEDULER_H_ 




#define TASK_0_PTR 0u
#define TASK_1_PTR 1u
#define TASK_2_PTR 2u
#define TASK_3_PTR 3u

#define OS_SAVE_TASK_PTR(task_ptr,Task_n_ptr) 



extern void OS_START_TASK(task_t* task, scheduling_t* scheduling_task);
extern void OS_ACTIVATE_TASK(task_t* task);
extern void OS_SLEEP_TASK(task_t* task, timebig_t usec, scheduling_t* scheduling_task_ptr);
extern void OS_INIT_TASK(
   task_t* task,
   func_p_t TaskFunction,
   unsigned_char_t AllowedInstances,
   unsigned_char_t idle_task,
   task_group_t* p_task_group,
   unsigned_char_t* pStackAddr,
   unsigned_int32_t uStackSize,
   privilige_mode_t privilige_mode,
   coreid_t core,
   unsigned_char_t default_prio
);
extern void OS_INIT_TASKS(void);
extern unsigned_char_t OS_TASK_STATE_REQUEST(void* task, task_state_t requested_state);
extern void OS_ACTIVATE_DISPATCHER(void);
extern void OS_TERMINATE_TASK(task_t* task, scheduling_t* scheduling_task);
extern void OS_TASK_DISPATCHER(void);
extern void OS_CREATE_TASK(task_t* task);
# 5 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c" 2
# 33 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
void SET_RUNNING_TASK(task_t* task, scheduling_t* scheduling_task)
{
   RUNNING_SCHEDULING_QUEUE_ENTRY = scheduling_task;
   if(task != 0u)
   {
      (&RUNNING_TASK[0u])->active = task->active;
      (&RUNNING_TASK[0u])->task_queued = task->task_queued;
      (&RUNNING_TASK[0u])->idle_task = task->idle_task;
      (&RUNNING_TASK[0u])->free = task->free;
      (&RUNNING_TASK[0u])->nr_of_ins_allowed = task->nr_of_ins_allowed;
      (&RUNNING_TASK[0u])->nr_of_ins_activated = task->nr_of_ins_activated;
      ASSIGN(&(&RUNNING_TASK[0u])->wait_act_until, &task->wait_act_until);
      ASSIGN(&(&RUNNING_TASK[0u])->wait_time, &task->wait_time);
      ASSIGN(&(&RUNNING_TASK[0u])->time_to_prio_inc, &task->time_to_prio_inc);
      (&RUNNING_TASK[0u])->overwaittime_per_prio_inc_step = task->overwaittime_per_prio_inc_step;
      ASSIGN(&(&RUNNING_TASK[0u])->max_allowed_wait_time, &task->max_allowed_wait_time);
      ASSIGN(&(&RUNNING_TASK[0u])->exe_time, &task->exe_time );
      ASSIGN(&(&RUNNING_TASK[0u])->start_time, &task->start_time);
      (&RUNNING_TASK[0u])->current_prio = task->current_prio;
      (&RUNNING_TASK[0u])->default_prio = task->default_prio;
      (&RUNNING_TASK[0u])->fp = task->fp;
      (&RUNNING_TASK[0u])->state_request = task->state_request;
      (&RUNNING_TASK[0u])->task_state = task->task_state;
      (&RUNNING_TASK[0u])->task_group = task->task_group;

      (&RUNNING_TASK[0u])->eax = task->eax;
      (&RUNNING_TASK[0u])->ebx = task->ebx;
      (&RUNNING_TASK[0u])->ecx = task->ecx;
      (&RUNNING_TASK[0u])->edx = task->edx;
# 78 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
      (&RUNNING_TASK[0u])->p_stack_pointer = task->p_stack_pointer;
      (&RUNNING_TASK[0u])->p_stack_pointer_by_malloc = task->p_stack_pointer_by_malloc;
      (&RUNNING_TASK[0u])->p_stack_pointer_start = task->p_stack_pointer_start;
      (&RUNNING_TASK[0u])->stack_size = task->stack_size;
      (&RUNNING_TASK[0u])->p_stack_pointer_end = task->p_stack_pointer_end;
   }
}


void OS_INIT_TASK_QUEUE(void)
{
   if(bTASK_QUEUE_INITIALIZED == 0u)
   {
      unsigned_char_t element_nr = 0;
      while(element_nr < (10u))
      {
         TASK_SCHEDULING_QUEUE[element_nr] = (scheduling_t)0u;
         OS_TASK_INIT_TASK_ENVIRONMENT(&TASK_RUN_QUEUE[element_nr]);
         element_nr++;
      }
      bTASK_QUEUE_INITIALIZED = 1u;
   }
}
task_t* ADD_TO_TASK_QUEUE(task_t* task)
{
   unsigned_char_t element_nr = 0u;
   task_t* ret_task = 0u;

   while( (element_nr < (10u))
          &&((&TASK_RUN_QUEUE[element_nr])->task_queued == 1u)
        )
   {
      element_nr++;
   }

   if( (element_nr < (10u)) && ((&TASK_RUN_QUEUE[element_nr])->task_queued == 0u) )
   {
      (&TASK_RUN_QUEUE[element_nr])->active = task->active;
      (&TASK_RUN_QUEUE[element_nr])->task_queued = 1u;
      (&TASK_RUN_QUEUE[element_nr])->idle_task = task->idle_task;
      (&TASK_RUN_QUEUE[element_nr])->free = task->free;
      (&TASK_RUN_QUEUE[element_nr])->nr_of_ins_allowed = task->nr_of_ins_allowed;
      (&TASK_RUN_QUEUE[element_nr])->nr_of_ins_activated = task->nr_of_ins_activated;
      ASSIGN(&(&TASK_RUN_QUEUE[element_nr])->wait_act_until, &task->wait_act_until);
      ASSIGN(&(&TASK_RUN_QUEUE[element_nr])->wait_time, &task->wait_time);
      ASSIGN(&(&TASK_RUN_QUEUE[element_nr])->time_to_prio_inc, &task->time_to_prio_inc);
      (&TASK_RUN_QUEUE[element_nr])->overwaittime_per_prio_inc_step = task->overwaittime_per_prio_inc_step;
      ASSIGN(&(&TASK_RUN_QUEUE[element_nr])->max_allowed_wait_time, &task->max_allowed_wait_time);
      ASSIGN(&(&TASK_RUN_QUEUE[element_nr])->exe_time, &task->exe_time );
      ASSIGN(&(&TASK_RUN_QUEUE[element_nr])->start_time, &task->start_time );
      (&TASK_RUN_QUEUE[element_nr])->current_prio = task->current_prio;
      (&TASK_RUN_QUEUE[element_nr])->default_prio = task->default_prio;
      (&TASK_RUN_QUEUE[element_nr])->fp = task->fp;
      (&TASK_RUN_QUEUE[element_nr])->state_request = task->state_request;
      (&TASK_RUN_QUEUE[element_nr])->task_state = task->task_state;
      (&TASK_RUN_QUEUE[element_nr])->task_group = task->task_group;

      (&TASK_RUN_QUEUE[element_nr])->eax = task->eax;
      (&TASK_RUN_QUEUE[element_nr])->ebx = task->ebx;
      (&TASK_RUN_QUEUE[element_nr])->ecx = task->ecx;
      (&TASK_RUN_QUEUE[element_nr])->edx = task->edx;
# 154 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
      (&TASK_RUN_QUEUE[element_nr])->p_stack_pointer = task->p_stack_pointer;
      (&TASK_RUN_QUEUE[element_nr])->p_stack_pointer_by_malloc = task->p_stack_pointer_by_malloc;
      (&TASK_RUN_QUEUE[element_nr])->p_stack_pointer_start = task->p_stack_pointer_start;
      (&TASK_RUN_QUEUE[element_nr])->stack_size = task->stack_size;
      (&TASK_RUN_QUEUE[element_nr])->p_stack_pointer_end = task->p_stack_pointer_end;
      ret_task = &TASK_RUN_QUEUE[element_nr];
   }
   return ret_task;
}
void DELETE_FROM_TASK_QUEUE(task_t* task)
{
   task->active = 0u ;
   task->task_queued = 0u ;
   task->idle_task = 0u ;
   task->free = 0u ;
   task->nr_of_ins_allowed = 0u ;
   task->nr_of_ins_activated = 0u ;
   ASSIGN_NULL(&task->wait_act_until);
   ASSIGN_NULL(&task->wait_time);
   ASSIGN_NULL(&task->time_to_prio_inc);
   task->overwaittime_per_prio_inc_step = 0u ;
   ASSIGN_NULL(&task->max_allowed_wait_time);
   ASSIGN_NULL(&task->exe_time);
   ASSIGN_NULL(&task->start_time);
   task->current_prio = 0u ;
   task->default_prio = 0u ;
   task->fp = 0u ;
   task->state_request = &OS_TASK_STATE_REQUEST ;
   task->task_state = Task_unspecified;
   task->task_group = 0u ;

   task->eax = 0u ;
   task->ebx = 0u ;
   task->ecx = 0u ;
   task->edx = 0u ;
# 206 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
   task->p_stack_pointer = 0u ;
   task->p_stack_pointer_by_malloc = 0u ;
   task->p_stack_pointer_start = 0u ;
   task->stack_size = 0u ;
   task->p_stack_pointer_end = 0u ;
}
task_t* GET_FROM_TASK_QUEUE(scheduling_t* scheduling_queue_element)
{
   return ((task_t*)*scheduling_queue_element);
}
scheduling_t* GET_FROM_SCHEDULING_QUEUE(unsigned_char_t element_nr)
{
   return ((scheduling_t*)&TASK_SCHEDULING_QUEUE[element_nr]);
}

void DELETE_FROM_SCHEDULING_QUEUE(scheduling_t* scheduling_queue_element)
{
   *scheduling_queue_element = 0u;
}
void ADD_TO_SCHEDULING_QUEUE(task_t* task)
{







   unsigned_char_t Add_successful = 0u;
   unsigned_char_t index = 0u;

   while( (index < (10u))
           &&(Add_successful == 0u))
   {
      if(TASK_SCHEDULING_QUEUE[index] == 0u)
      {
         TASK_SCHEDULING_QUEUE[index] = task;
         Add_successful = 1u;
      }
      index++;
   }
   return;
}
# 278 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
task_t* GET_IDLE_TASK(void)
{
   return (&TASK_IDLE_QUEUE[0u]);
}
void ADD_TO_IDLE_TASK_QUEUE(task_t* task)
{

   if((&TASK_IDLE_QUEUE[0u])->idle_task == 0u)
   {
      (&TASK_IDLE_QUEUE[0u])->active = task->active ;
      (&TASK_IDLE_QUEUE[0u])->task_queued = task->task_queued ;
      (&TASK_IDLE_QUEUE[0u])->idle_task = task->idle_task ;
      (&TASK_IDLE_QUEUE[0u])->free = task->free ;
      (&TASK_IDLE_QUEUE[0u])->nr_of_ins_allowed = task->nr_of_ins_allowed ;
      (&TASK_IDLE_QUEUE[0u])->nr_of_ins_activated = task->nr_of_ins_activated ;
      ASSIGN(&(&TASK_IDLE_QUEUE[0u])->wait_act_until, &task->wait_act_until);
      ASSIGN(&(&TASK_IDLE_QUEUE[0u])->wait_time, &task->wait_time);
      ASSIGN(&(&TASK_IDLE_QUEUE[0u])->time_to_prio_inc, &task->time_to_prio_inc);
      (&TASK_IDLE_QUEUE[0u])->overwaittime_per_prio_inc_step = task->overwaittime_per_prio_inc_step;
      ASSIGN(&(&TASK_IDLE_QUEUE[0u])->max_allowed_wait_time, &task->max_allowed_wait_time);
      ASSIGN(&(&TASK_IDLE_QUEUE[0u])->exe_time, &task->exe_time);
      (&TASK_IDLE_QUEUE[0u])->current_prio = task->current_prio ;
      (&TASK_IDLE_QUEUE[0u])->default_prio = task->default_prio ;
      (&TASK_IDLE_QUEUE[0u])->fp = task->fp ;
      (&TASK_IDLE_QUEUE[0u])->state_request = task->state_request ;
      (&TASK_IDLE_QUEUE[0u])->task_state = Task_ready ;
      (&TASK_IDLE_QUEUE[0u])->task_group = task->task_group ;

      (&TASK_IDLE_QUEUE[0u])->eax = task->eax ;
      (&TASK_IDLE_QUEUE[0u])->ebx = task->ebx ;
      (&TASK_IDLE_QUEUE[0u])->ecx = task->ecx ;
      (&TASK_IDLE_QUEUE[0u])->edx = task->edx ;
# 327 "E:\\NeuOrga\\Programmieren\\c_cpp\\github_os\\input\\src\\os_base\\os_task_queue.c"
      (&TASK_IDLE_QUEUE[0u])->p_stack_pointer = task->p_stack_pointer ;
      (&TASK_IDLE_QUEUE[0u])->p_stack_pointer_by_malloc = task->p_stack_pointer_by_malloc;
      (&TASK_IDLE_QUEUE[0u])->p_stack_pointer_start = task->p_stack_pointer_start;
      (&TASK_IDLE_QUEUE[0u])->stack_size = task->stack_size ;
      (&TASK_IDLE_QUEUE[0u])->p_stack_pointer_end = task->p_stack_pointer_end ;
   }
}
task_t* GET_RUNNING_TASK(void)
{
   return (&RUNNING_TASK[0u]);
}
scheduling_t* GET_RUNNING_SCHEDULING_QUEUE_ELEMENT_PTR(void)
{
   return RUNNING_SCHEDULING_QUEUE_ENTRY;
}
void OS_INIT_TASK(
   task_t* task,
   func_p_t TaskFunction,
   unsigned_char_t AllowedInstances,
   unsigned_char_t idle_task,
   task_group_t* p_task_group,
   unsigned_char_t* pStackAddr,
   unsigned_int32_t uStackSize,
   privilige_mode_t privilige_mode,
   coreid_t core,
   unsigned_char_t default_prio
)
{
   ((core) = (core));
   if(task!=0u)
   {
      task->active = 0u;
      task->fp = TaskFunction;
      task->nr_of_ins_allowed = AllowedInstances;
      task->task_group = p_task_group;
      task->nr_of_ins_activated = 0u;
      ASSIGN_NULL(&task->wait_act_until);
      task->privilige_mode = privilige_mode;
      task->default_prio = default_prio;

      task->overwaittime_per_prio_inc_step = 1u;
      ASSIGN_UINT32(&task->max_allowed_wait_time, 100000u);

      task->idle_task = idle_task;
      task->state_request = &OS_TASK_STATE_REQUEST;
      OS_TASK_STATE_REQUEST(task, Task_unspecified);
      OS_CREATE_TASK(task);
      if(uStackSize > 2000u)
      {
         uStackSize = 2000u;
      }


      task->p_stack_pointer_by_malloc = pStackAddr;
      task->p_stack_pointer_start = pStackAddr;
      task->p_stack_pointer_end = (unsigned_char_t*)pStackAddr + uStackSize - 1;
      task->stack_size = uStackSize;

      task->p_stack_pointer = task->p_stack_pointer_end;
   }
   else
   {
      OS_SET_SW_BUG(os_bug_null_pointer, Func_InitTask);
   }
}
