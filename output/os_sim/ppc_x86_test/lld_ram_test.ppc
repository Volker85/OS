# 1 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
# 1 "C:\\Users\\president\\Desktop\\sbx\\input\\tools//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 8
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 0
#define __VERSION__ "8.2.0"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 12
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ short unsigned int
#define __WINT_TYPE__ short unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST16_TYPE__ short int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_FAST16_TYPE__ short unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_ABI_VERSION 1013
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffff
#define __WCHAR_MIN__ 0
#define __WINT_MAX__ 0xffff
#define __WINT_MIN__ 0
#define __PTRDIFF_MAX__ 0x7fffffff
#define __SIZE_MAX__ 0xffffffffU
#define __SCHAR_WIDTH__ 8
#define __SHRT_WIDTH__ 16
#define __INT_WIDTH__ 32
#define __LONG_WIDTH__ 32
#define __LONG_LONG_WIDTH__ 64
#define __WCHAR_WIDTH__ 16
#define __WINT_WIDTH__ 16
#define __PTRDIFF_WIDTH__ 32
#define __SIZE_WIDTH__ 32
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __INTMAX_WIDTH__ 64
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __SIG_ATOMIC_WIDTH__ 32
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffff
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffU
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST8_WIDTH__ 8
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_MAX__ 0x7fffffff
#define __INT32_C(c) c
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __INT_LEAST64_WIDTH__ 64
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffU
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7f
#define __INT_FAST8_WIDTH__ 8
#define __INT_FAST16_MAX__ 0x7fff
#define __INT_FAST16_WIDTH__ 16
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __INT_FAST64_WIDTH__ 64
#define __UINT_FAST8_MAX__ 0xff
#define __UINT_FAST16_MAX__ 0xffff
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fffffff
#define __INTPTR_WIDTH__ 32
#define __UINTPTR_MAX__ 0xffffffffU
#define __GCC_IEC_559 2
#define __GCC_IEC_559_COMPLEX 2
#define __FLT_EVAL_METHOD__ 2
#define __FLT_EVAL_METHOD_TS_18661_3__ 2
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859811704183484516925e+38F
#define __FLT_MIN__ 1.17549435082228750796873653722224568e-38F
#define __FLT_EPSILON__ 1.19209289550781250000000000000000000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.79769313486231570814527423731704357e+308L)
#define __DBL_MIN__ ((double)2.22507385850720138309023271733240406e-308L)
#define __DBL_EPSILON__ ((double)2.22044604925031308084726333618164062e-16L)
#define __DBL_DENORM_MIN__ ((double)4.94065645841246544176568792868221372e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 64
#define __LDBL_DIG__ 18
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 21
#define __LDBL_DECIMAL_DIG__ 21
#define __LDBL_MAX__ 1.18973149535723176502126385303097021e+4932L
#define __LDBL_MIN__ 3.36210314311209350626267781732175260e-4932L
#define __LDBL_EPSILON__ 1.08420217248550443400745280086994171e-19L
#define __LDBL_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __FLT32_MANT_DIG__ 24
#define __FLT32_DIG__ 6
#define __FLT32_MIN_EXP__ (-125)
#define __FLT32_MIN_10_EXP__ (-37)
#define __FLT32_MAX_EXP__ 128
#define __FLT32_MAX_10_EXP__ 38
#define __FLT32_DECIMAL_DIG__ 9
#define __FLT32_MAX__ 3.40282346638528859811704183484516925e+38F32
#define __FLT32_MIN__ 1.17549435082228750796873653722224568e-38F32
#define __FLT32_EPSILON__ 1.19209289550781250000000000000000000e-7F32
#define __FLT32_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F32
#define __FLT32_HAS_DENORM__ 1
#define __FLT32_HAS_INFINITY__ 1
#define __FLT32_HAS_QUIET_NAN__ 1
#define __FLT64_MANT_DIG__ 53
#define __FLT64_DIG__ 15
#define __FLT64_MIN_EXP__ (-1021)
#define __FLT64_MIN_10_EXP__ (-307)
#define __FLT64_MAX_EXP__ 1024
#define __FLT64_MAX_10_EXP__ 308
#define __FLT64_DECIMAL_DIG__ 17
#define __FLT64_MAX__ 1.79769313486231570814527423731704357e+308F64
#define __FLT64_MIN__ 2.22507385850720138309023271733240406e-308F64
#define __FLT64_EPSILON__ 2.22044604925031308084726333618164062e-16F64
#define __FLT64_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F64
#define __FLT64_HAS_DENORM__ 1
#define __FLT64_HAS_INFINITY__ 1
#define __FLT64_HAS_QUIET_NAN__ 1
#define __FLT128_MANT_DIG__ 113
#define __FLT128_DIG__ 33
#define __FLT128_MIN_EXP__ (-16381)
#define __FLT128_MIN_10_EXP__ (-4931)
#define __FLT128_MAX_EXP__ 16384
#define __FLT128_MAX_10_EXP__ 4932
#define __FLT128_DECIMAL_DIG__ 36
#define __FLT128_MAX__ 1.18973149535723176508575932662800702e+4932F128
#define __FLT128_MIN__ 3.36210314311209350626267781732175260e-4932F128
#define __FLT128_EPSILON__ 1.92592994438723585305597794258492732e-34F128
#define __FLT128_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F128
#define __FLT128_HAS_DENORM__ 1
#define __FLT128_HAS_INFINITY__ 1
#define __FLT128_HAS_QUIET_NAN__ 1
#define __FLT32X_MANT_DIG__ 53
#define __FLT32X_DIG__ 15
#define __FLT32X_MIN_EXP__ (-1021)
#define __FLT32X_MIN_10_EXP__ (-307)
#define __FLT32X_MAX_EXP__ 1024
#define __FLT32X_MAX_10_EXP__ 308
#define __FLT32X_DECIMAL_DIG__ 17
#define __FLT32X_MAX__ 1.79769313486231570814527423731704357e+308F32x
#define __FLT32X_MIN__ 2.22507385850720138309023271733240406e-308F32x
#define __FLT32X_EPSILON__ 2.22044604925031308084726333618164062e-16F32x
#define __FLT32X_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F32x
#define __FLT32X_HAS_DENORM__ 1
#define __FLT32X_HAS_INFINITY__ 1
#define __FLT32X_HAS_QUIET_NAN__ 1
#define __FLT64X_MANT_DIG__ 64
#define __FLT64X_DIG__ 18
#define __FLT64X_MIN_EXP__ (-16381)
#define __FLT64X_MIN_10_EXP__ (-4931)
#define __FLT64X_MAX_EXP__ 16384
#define __FLT64X_MAX_10_EXP__ 4932
#define __FLT64X_DECIMAL_DIG__ 21
#define __FLT64X_MAX__ 1.18973149535723176502126385303097021e+4932F64x
#define __FLT64X_MIN__ 3.36210314311209350626267781732175260e-4932F64x
#define __FLT64X_EPSILON__ 1.08420217248550443400745280086994171e-19F64x
#define __FLT64X_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951F64x
#define __FLT64X_HAS_DENORM__ 1
#define __FLT64X_HAS_INFINITY__ 1
#define __FLT64X_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ _
#define __GNUC_GNU_INLINE__ 1
#define __NO_INLINE__ 1
#define __STRICT_ANSI__ 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 1
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 1
#define __GCC_ATOMIC_SHORT_LOCK_FREE 1
#define __GCC_ATOMIC_INT_LOCK_FREE 1
#define __GCC_ATOMIC_LONG_LOCK_FREE 1
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 1
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 2
#define __SIZEOF_WINT_T__ 2
#define __SIZEOF_PTRDIFF_T__ 4
#define __i386 1
#define __i386__ 1
#define __SIZEOF_FLOAT80__ 12
#define __SIZEOF_FLOAT128__ 16
#define __ATOMIC_HLE_ACQUIRE 65536
#define __ATOMIC_HLE_RELEASE 131072
#define __GCC_ASM_FLAG_OUTPUTS__ 1
#define __tune_i386__ 1
#define __code_model_32__ 1
#define __SEG_FS 1
#define __SEG_GS 1
#define _X86_ 1
#define __stdcall __attribute__((__stdcall__))
#define __fastcall __attribute__((__fastcall__))
#define __thiscall __attribute__((__thiscall__))
#define __cdecl __attribute__((__cdecl__))
#define __GXX_MERGED_TYPEINFO_NAMES 0
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __MSVCRT__ 1
#define __MINGW32__ 1
#define _WIN32 1
#define __WIN32 1
#define __WIN32__ 1
#define __WINNT 1
#define __WINNT__ 1
#define _INTEGRAL_MAX_BITS 64
#define __declspec(x) __attribute__((x))
#define __DECIMAL_BID_FORMAT__ 1
# 1 "<command-line>"
#define CFG_PROCESSOR 3
# 1 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
# 1 "c:\\program\\mingw\\include\\stdio.h" 1 3
# 38 "c:\\program\\mingw\\include\\stdio.h" 3
       
# 39 "c:\\program\\mingw\\include\\stdio.h" 3
# 50 "c:\\program\\mingw\\include\\stdio.h" 3
#define _STDIO_H 




# 1 "c:\\program\\mingw\\include\\_mingw.h" 1 3
# 34 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __MINGW_H 
# 49 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __MINGW32_VERSION 5002002L
#define __MINGW32_MAJOR_VERSION 5
#define __MINGW32_MINOR_VERSION 2
#define __MINGW32_PATCHLEVEL 2


       
# 56 "c:\\program\\mingw\\include\\_mingw.h" 3
# 66 "c:\\program\\mingw\\include\\_mingw.h" 3
# 1 "c:\\program\\mingw\\include\\msvcrtver.h" 1 3
# 34 "c:\\program\\mingw\\include\\msvcrtver.h" 3
#define _MSVCRTVER_H 
       
# 36 "c:\\program\\mingw\\include\\msvcrtver.h" 3






#define __MSVCR60_DLL 0x0600
#define __MSVCR61_DLL 0x0601
#define __MSVCR70_DLL 0x0700
#define __MSVCR71_DLL 0x0701
#define __MSVCR80_DLL 0x0800
#define __MSVCR90_DLL 0x0900
#define __MSVCR100_DLL 0x1000
#define __MSVCR110_DLL 0x1100
#define __MSVCR120_DLL 0x1200
# 68 "c:\\program\\mingw\\include\\msvcrtver.h" 3
#define __MSVCRT_VERSION__ __MSVCR60_DLL
# 67 "c:\\program\\mingw\\include\\_mingw.h" 2 3






# 1 "c:\\program\\mingw\\include\\w32api.h" 1 3
# 34 "c:\\program\\mingw\\include\\w32api.h" 3
#define _W32API_H 
       
# 36 "c:\\program\\mingw\\include\\w32api.h" 3
# 51 "c:\\program\\mingw\\include\\w32api.h" 3
#define __W32API_VERSION 5002002L
#define __W32API_MAJOR_VERSION 5
#define __W32API_MINOR_VERSION 2
#define __W32API_PATCHLEVEL 2




# 1 "c:\\program\\mingw\\include\\sdkddkver.h" 1 3
# 34 "c:\\program\\mingw\\include\\sdkddkver.h" 3
#define _SDKDDKVER_H 
       
# 36 "c:\\program\\mingw\\include\\sdkddkver.h" 3





#define OSVERSION_MASK 0xFFFF0000
#define SPVERSION_MASK 0x0000FF00
#define SUBVERSION_MASK 0x000000FF




#define OSVER(ver) ((ver) & OSVERSION_MASK)
#define SPVER(ver) (((ver) & SPVERSION_MASK) >> 8)
#define SUBVER(ver) ((ver) & SUBVERSION_MASK)
#define WINNTVER(ver) ((ver) >> 16)



#define NTDDI_VERSION_FROM_WIN32_WINNT(ver) _NTDDI_VERSION_FROM_WIN32_WINNT(ver)
#define _NTDDI_VERSION_FROM_WIN32_WINNT(ver) ver ##0000





#define _WIN32_WINNT_NT4 0x0400
#define _WIN32_WINNT_NT4E 0x0401
#define _WIN32_WINNT_NT4SP3 0x0403
#define _WIN32_WINDOWS_95 0x0400
#define _WIN32_WINDOWS_98 0x0410
#define _WIN32_WINDOWS_ME 0x0490
#define _WIN32_WINNT_WIN2K 0x0500
#define _WIN32_WINNT_WINXP 0x0501
#define _WIN32_WINNT_WS03 0x0502
#define _WIN32_WINNT_WIN6 0x0600
#define _WIN32_WINNT_VISTA 0x0600
#define _WIN32_WINNT_WS08 0x0600
#define _WIN32_WINNT_LONGHORN 0x0600
#define _WIN32_WINNT_WIN7 0x0601
#define _WIN32_WINNT_WIN8 0x0602
#define _WIN32_WINNT_WINBLUE 0x0603




#define _WIN32_IE_IE50 0x0500
#define _WIN32_IE_IE501 0x0501
#define _WIN32_IE_IE55 0x0550
#define _WIN32_IE_IE56 0x0560
#define _WIN32_IE_IE60 0x0600
#define _WIN32_IE_IE60SP1 0x0601
#define _WIN32_IE_IE60SP2 0x0603
#define _WIN32_IE_IE70 0x0700
#define _WIN32_IE_IE80 0x0800

#define _WIN32_IE_IE30 0x0300
#define _WIN32_IE_IE301 0x0301
#define _WIN32_IE_IE302 0x0302
#define _WIN32_IE_IE40 0x0400
#define _WIN32_IE_IE401 0x0401




#define __NTDDI_WIN5 0x05000000
#define __NTDDI_WIN51 0x05010000
#define __NTDDI_WIN52 0x05020000
#define __NTDDI_WIN6 0x06000000
#define __NTDDI_WIN61 0x06010000
#define __NTDDI_WIN62 0x06020000
#define __NTDDI_WIN63 0x06030000
#define __NTDDI_SP0 0x00000000
#define __NTDDI_SP1 0x00000100
#define __NTDDI_SP2 0x00000200
#define __NTDDI_SP3 0x00000300
#define __NTDDI_SP4 0x00000400

#define NTDDI_WIN2K __NTDDI_WIN5 + __NTDDI_SP0
#define NTDDI_WIN2KSP1 __NTDDI_WIN5 + __NTDDI_SP1
#define NTDDI_WIN2KSP2 __NTDDI_WIN5 + __NTDDI_SP2
#define NTDDI_WIN2KSP3 __NTDDI_WIN5 + __NTDDI_SP3
#define NTDDI_WIN2KSP4 __NTDDI_WIN5 + __NTDDI_SP4

#define NTDDI_WINXP __NTDDI_WIN51 + __NTDDI_SP0
#define NTDDI_WINXPSP1 __NTDDI_WIN51 + __NTDDI_SP1
#define NTDDI_WINXPSP2 __NTDDI_WIN51 + __NTDDI_SP2
#define NTDDI_WINXPSP3 __NTDDI_WIN51 + __NTDDI_SP3

#define NTDDI_WS03 __NTDDI_WIN52 + __NTDDI_SP0
#define NTDDI_WS03SP1 __NTDDI_WIN52 + __NTDDI_SP1
#define NTDDI_WS03SP2 __NTDDI_WIN52 + __NTDDI_SP2

#define NTDDI_VISTA __NTDDI_WIN6 + __NTDDI_SP0
#define NTDDI_VISTASP1 __NTDDI_WIN6 + __NTDDI_SP1
#define NTDDI_VISTASP2 __NTDDI_WIN6 + __NTDDI_SP2

#define NTDDI_LONGHORN NTDDI_VISTA

#define NTDDI_WIN6 NTDDI_VISTA
#define NTDDI_WIN6SP1 NTDDI_VISTASP1
#define NTDDI_WIN6SP2 NTDDI_VISTASP2

#define NTDDI_WS08 __NTDDI_WIN6 + __NTDDI_SP1

#define NTDDI_WIN7 __NTDDI_WIN61 + __NTDDI_SP0

#define NTDDI_WIN8 __NTDDI_WIN62 + __NTDDI_SP0

#define NTDDI_WINBLUE __NTDDI_WIN63 + __NTDDI_SP0
# 185 "c:\\program\\mingw\\include\\sdkddkver.h" 3
#define _WIN32_WINNT _WIN32_WINNT_WIN2K




#define WINVER _WIN32_WINNT
# 201 "c:\\program\\mingw\\include\\sdkddkver.h" 3
#define NTDDI_VERSION NTDDI_VERSION_FROM_WIN32_WINNT(_WIN32_WINNT)
# 212 "c:\\program\\mingw\\include\\sdkddkver.h" 3
#define _WIN32_IE _WIN32_IE_IE50
# 237 "c:\\program\\mingw\\include\\sdkddkver.h" 3
#define _M_IX86 300
# 273 "c:\\program\\mingw\\include\\sdkddkver.h" 3
#define _M_IX86_FP 0
# 60 "c:\\program\\mingw\\include\\w32api.h" 2 3
# 79 "c:\\program\\mingw\\include\\w32api.h" 3
#define Windows95 _WIN32_WINDOWS_95
#define Windows98 _WIN32_WINDOWS_98
#define WindowsME _WIN32_WINDOWS_ME







#define WindowsNT4 _WIN32_WINNT_NT4
#define Windows2000 _WIN32_WINNT_WIN2K
#define WindowsXP _WIN32_WINNT_WINXP
#define Windows2003 _WIN32_WINNT_WS03
#define WindowsVista _WIN32_WINNT_VISTA







#define IE3 _WIN32_IE_IE30
#define IE301 _WIN32_IE_IE301
#define IE302 _WIN32_IE_IE302
#define IE4 _WIN32_IE_IE40
#define IE401 _WIN32_IE_IE401
#define IE5 _WIN32_IE_IE50
#define IE5a _WIN32_IE_IE50
#define IE5b _WIN32_IE_IE50
#define IE501 _WIN32_IE_IE501
#define IE55 _WIN32_IE_IE55
#define IE56 _WIN32_IE_IE56
#define IE6 _WIN32_IE_IE60
#define IE601 _WIN32_IE_IE60SP1
#define IE602 _WIN32_IE_IE60SP2
#define IE7 _WIN32_IE_IE70
# 154 "c:\\program\\mingw\\include\\w32api.h" 3
#define __AW_SUFFIXED__(__NAME__) __NAME__ ##A





#define __AW_EXTENDED__(__NAME__) __AW_SUFFIXED__(__NAME__ ##_)
# 169 "c:\\program\\mingw\\include\\w32api.h" 3
#define __AW_STRING_A__(__TEXT__) __TEXT__
#define __AW__WCHAR_T__(__TEXT__) __AW_STRING_A__(L ##__TEXT__)
#define __AW_STRING_W__(__TEXT__) __AW__WCHAR_T__(__TEXT__)






#define __AW_ALIAS__(__NAME__) __AW_SUFFIXED__(__NAME__) __NAME__
#define __AW_ALIAS_EX__(__NAME__) __AW_EXTENDED__(__NAME__) __NAME__
# 193 "c:\\program\\mingw\\include\\w32api.h" 3
#define _EXTERN_C extern
#define _BEGIN_C_DECLS 
#define _END_C_DECLS 
# 74 "c:\\program\\mingw\\include\\_mingw.h" 2 3
# 109 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __CRT_GLOB_USE_MSVCRT__ 0x0001




#define __CRT_GLOB_USE_MINGW__ 0x0002
# 151 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __CRT_GLOB_USE_SINGLE_QUOTE__ 0x0010
#define __CRT_GLOB_BRACKET_GROUPS__ 0x0020
# 161 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __CRT_GLOB_ESCAPE_CHAR__ (char)(127)
# 174 "c:\\program\\mingw\\include\\_mingw.h" 3
# 1 "c:\\program\\mingw\\include\\features.h" 1 3
# 39 "c:\\program\\mingw\\include\\features.h" 3
       
# 40 "c:\\program\\mingw\\include\\features.h" 3
# 61 "c:\\program\\mingw\\include\\features.h" 3
#define __MINGW_FEATURES__ (__MINGW_FEATURES_BEGIN__) __MINGW_FEATURE_IGNORE__ (__MINGW_ANSI_STDIO__) __MINGW_FEATURE_IGNORE__ (__MINGW_LC_MESSAGES__) __MINGW_FEATURE_IGNORE__ (__MINGW_LC_ENVVARS__) __MINGW_FEATURES_END__
# 175 "c:\\program\\mingw\\include\\_mingw.h" 2 3
# 187 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __MINGW_FEATURE_ENABLE__(__FEATURE__) | (__FEATURE__)
#define __MINGW_FEATURE_IGNORE__(__FEATURE__) 

#define __MINGW_FEATURES_BEGIN__ 0x0000000000000000ULL
#define __MINGW_FEATURES_UNSET__ 0x0000000000000000ULL
#define __MINGW_FEATURES_END__ 




#define __MINGW_ANSI_STDIO__ 0x0000000000000001ULL




#define __MINGW_LC_EXTENSIONS__ 0x0000000000000050ULL
#define __MINGW_LC_MESSAGES__ 0x0000000000000010ULL
#define __MINGW_LC_ENVVARS__ 0x0000000000000040ULL




#undef __attribute__
# 255 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __MINGW_IMPORT extern __attribute__((__dllimport__))





#define _CRTIMP 


#define __DECLSPEC_SUPPORTED 
# 284 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __int64 long long


#define __int32 long


#define __int16 short


#define __int8 char


#define __small char


#define __hyper long long
# 313 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __MINGW_GNUC_PREREQ(major,minor) (__GNUC__ > (major) || (__GNUC__ == (major) && __GNUC_MINOR__ >= (minor)))
# 326 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __CRT_INLINE extern __inline__
# 336 "c:\\program\\mingw\\include\\_mingw.h" 3
#define _CRTALIAS __CRT_INLINE __attribute__((__always_inline__))
#define __CRT_ALIAS __CRT_INLINE __attribute__((__always_inline__))
# 351 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __JMPSTUB__(__BUILD_HINT__) 
#define __LIBIMPL__(__BUILD_HINT__) 





#define __UNUSED_PARAM(x) x __attribute__((__unused__))






#define __MINGW_ATTRIB_NORETURN __attribute__((__noreturn__))
#define __MINGW_ATTRIB_CONST __attribute__((__const__))






#define __MINGW_ATTRIB_MALLOC __attribute__((__malloc__))
#define __MINGW_ATTRIB_PURE __attribute__((__pure__))
# 384 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __MINGW_ATTRIB_NONNULL(arg) __attribute__((__nonnull__(arg)))





#define __MINGW_ATTRIB_DEPRECATED __attribute__((__deprecated__))





#define __MINGW_NOTHROW __attribute__((__nothrow__))
# 430 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __USE_MINGW_ANSI_STDIO __MINGW_ANSI_STDIO__
# 445 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __paste(prefix,suffix) prefix ## suffix
#define __valueless(token) ((token - 0) == 0) && (__paste(token,10) == 10)
# 526 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __POSIX_1996_DEPRECATED 
# 540 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __POSIX_2001_DEPRECATED 
# 554 "c:\\program\\mingw\\include\\_mingw.h" 3
#define __POSIX_2008_DEPRECATED 
# 56 "c:\\program\\mingw\\include\\stdio.h" 2 3
# 64 "c:\\program\\mingw\\include\\stdio.h" 3
#define __need_NULL 
#define __need_size_t 
#define __need_wchar_t 
#define __need_wint_t 
# 1 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 187 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 







#define __size_t 






# 216 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 238 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef __need_size_t
# 267 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 294 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 328 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
typedef short unsigned int wchar_t;
# 347 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t




#define _WINT_T 




typedef short unsigned int wint_t;

#undef __need_wint_t
# 401 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 69 "c:\\program\\mingw\\include\\stdio.h" 2 3
# 85 "c:\\program\\mingw\\include\\stdio.h" 3
#define __need___off64_t 
# 95 "c:\\program\\mingw\\include\\stdio.h" 3
# 1 "c:\\program\\mingw\\include\\sys/types.h" 1 3
# 34 "c:\\program\\mingw\\include\\sys/types.h" 3
       
# 35 "c:\\program\\mingw\\include\\sys/types.h" 3
# 84 "c:\\program\\mingw\\include\\sys/types.h" 3
#undef __need_off_t






  typedef long long __off64_t;
# 108 "c:\\program\\mingw\\include\\sys/types.h" 3
#undef __need___off64_t
# 132 "c:\\program\\mingw\\include\\sys/types.h" 3
#undef __need_ssize_t
# 163 "c:\\program\\mingw\\include\\sys/types.h" 3
#undef __need_time_t
# 96 "c:\\program\\mingw\\include\\stdio.h" 2 3





#define __need___va_list 
# 1 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stdarg.h" 1 3 4
# 34 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stdarg.h" 3 4
#undef __need___va_list




#define __GNUC_VA_LIST 
typedef __builtin_va_list __gnuc_va_list;
# 103 "c:\\program\\mingw\\include\\stdio.h" 2 3
#define __VALIST __builtin_va_list
# 113 "c:\\program\\mingw\\include\\stdio.h" 3
#define _IOREAD 1
#define _IOWRT 2
#define _IORW 0x0080




#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2



#define EOF (-1)
# 141 "c:\\program\\mingw\\include\\stdio.h" 3
#define FILENAME_MAX (260)





#define FOPEN_MAX (20)



#define TMP_MAX 32767






#define _P_tmpdir "\\"



#define _wP_tmpdir L"\\"






#define L_tmpnam (16)

#define _IOFBF 0x0000
#define _IOLBF 0x0040
#define _IONBF 0x0004

#define _IOMYBUF 0x0008
#define _IOEOF 0x0010
#define _IOERR 0x0020
#define _IOSTRG 0x0040







#define BUFSIZ 512





#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2
# 210 "c:\\program\\mingw\\include\\stdio.h" 3
typedef struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
} FILE;
# 239 "c:\\program\\mingw\\include\\stdio.h" 3
extern __attribute__((__dllimport__)) FILE _iob[];



#define stdin (&_iob[STDIN_FILENO])
#define stdout (&_iob[STDOUT_FILENO])
#define stderr (&_iob[STDERR_FILENO])














 __attribute__((__cdecl__)) __attribute__((__nothrow__)) FILE * fopen (const char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) FILE * freopen (const char *, const char *, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fflush (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fclose (FILE *);






 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int remove (const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int rename (const char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) FILE * tmpfile (void);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char * tmpnam (char *);
# 295 "c:\\program\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int setvbuf (FILE *, char *, int, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void setbuf (FILE *, char *);






#undef __mingw_stdio_redirect__
#define __mingw_stdio_redirect__(F) __cdecl __MINGW_NOTHROW __Wformat(F)
#define __Wformat_mingw_printf(F,A) __attribute__((__format__(__mingw_printf__,F,A)))





#define __Wformat(F) __Wformat_ ##F __mingw_ ##F
# 329 "c:\\program\\mingw\\include\\stdio.h" 3
#define __Wformat_printf __Wformat_mingw_printf(1,2)
#define __Wformat_fprintf __Wformat_mingw_printf(2,3)
#define __Wformat_sprintf __Wformat_mingw_printf(2,3)
#define __Wformat_vprintf __Wformat_mingw_printf(1,0)
#define __Wformat_vfprintf __Wformat_mingw_printf(2,0)
#define __Wformat_vsprintf __Wformat_mingw_printf(2,0)




#define __Wformat_snprintf __Wformat_mingw_printf(3,4)
#define __Wformat_vsnprintf __Wformat_mingw_printf(3,0)

extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,2,3))) __mingw_fprintf(FILE*, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,1,2))) __mingw_printf(const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,2,3))) __mingw_sprintf(char*, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,3,4))) __mingw_snprintf(char*, size_t, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,2,0))) __mingw_vfprintf(FILE*, const char*, __builtin_va_list);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,1,0))) __mingw_vprintf(const char*, __builtin_va_list);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,2,0))) __mingw_vsprintf(char*, const char*, __builtin_va_list);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,3,0))) __mingw_vsnprintf(char*, size_t, const char*, __builtin_va_list);





#define _MSVC_PRINTF_QUIRKS 0x0100U
#define _QUERY_MSVC_PRINTF_QUIRKS ~0U, 0U
#define _DISABLE_MSVC_PRINTF_QUIRKS ~_MSVC_PRINTF_QUIRKS, 0U
#define _ENABLE_MSVC_PRINTF_QUIRKS ~0U, _MSVC_PRINTF_QUIRKS
# 376 "c:\\program\\mingw\\include\\stdio.h" 3
extern unsigned int _mingw_output_format_control( unsigned int, unsigned int );




#undef __mingw_stdio_redirect__
# 394 "c:\\program\\mingw\\include\\stdio.h" 3
#define __mingw_stdio_redirect__ static __inline__ __cdecl __MINGW_NOTHROW
# 410 "c:\\program\\mingw\\include\\stdio.h" 3
static __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__))
int fprintf (FILE *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__))
int printf (const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vprintf( __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__))
int sprintf (char *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

static __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__))
int vfprintf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfprintf( __stream, __format, __local_argv );
}

static __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__))
int vprintf (const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vprintf( __format, __local_argv );
}

static __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__))
int vsprintf (char *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsprintf( __stream, __format, __local_argv );
}
# 500 "c:\\program\\mingw\\include\\stdio.h" 3
#undef __Wformat
#undef __mingw_stdio_redirect__
#define __mingw_stdio_redirect__(F) __cdecl __MINGW_NOTHROW __Wformat(F)
#define __Wformat_msvcrt_printf(F,A) __attribute__((__format__(__ms_printf__,F,A)))
#define __Wformat(F) __Wformat_ms_ ##F __msvcrt_ ##F

#define __Wformat_ms_printf __Wformat_msvcrt_printf(1,2)
#define __Wformat_ms_fprintf __Wformat_msvcrt_printf(2,3)
#define __Wformat_ms_sprintf __Wformat_msvcrt_printf(2,3)
#define __Wformat_ms_vprintf __Wformat_msvcrt_printf(1,0)
#define __Wformat_ms_vfprintf __Wformat_msvcrt_printf(2,0)
#define __Wformat_ms_vsprintf __Wformat_msvcrt_printf(2,0)

 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,2,3))) __msvcrt_fprintf(FILE *, const char *, ...);
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,1,2))) __msvcrt_printf(const char *, ...);
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,2,3))) __msvcrt_sprintf(char *, const char *, ...);
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,2,0))) __msvcrt_vfprintf(FILE *, const char *, __builtin_va_list);
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,1,0))) __msvcrt_vprintf(const char *, __builtin_va_list);
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,2,0))) __msvcrt_vsprintf(char *, const char *, __builtin_va_list);

#undef __mingw_stdio_redirect__
#undef __Wformat



 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _snprintf (char *, size_t, const char *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _vsnprintf (char *, size_t, const char *, __builtin_va_list);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _vscprintf (const char *, __builtin_va_list);
# 699 "c:\\program\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fscanf (FILE *, const char *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int scanf (const char *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int sscanf (const char *, const char *, ...);



 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fgetc (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char * fgets (char *, int, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fputc (int, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fputs (const char *, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char * gets (char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int puts (const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int ungetc (int, FILE *);
# 720 "c:\\program\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _filbuf (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _flsbuf (int, FILE *);



extern __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__)) int getc (FILE *);
extern __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__)) int getc (FILE * __F)
{
  return (--__F->_cnt >= 0)
    ? (int) (unsigned char) *__F->_ptr++
    : _filbuf (__F);
}

extern __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__)) int putc (int, FILE *);
extern __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__)) int putc (int __c, FILE * __F)
{
  return (--__F->_cnt >= 0)
    ? (int) (unsigned char) (*__F->_ptr++ = (char)__c)
    : _flsbuf (__c, __F);
}

extern __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__)) int getchar (void);
extern __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__)) int getchar (void)
{
  return (--(&_iob[0])->_cnt >= 0)
    ? (int) (unsigned char) *(&_iob[0])->_ptr++
    : _filbuf ((&_iob[0]));
}

extern __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__)) int putchar(int);
extern __inline__ __attribute__((__cdecl__)) __attribute__((__nothrow__)) int putchar(int __c)
{
  return (--(&_iob[1])->_cnt >= 0)
    ? (int) (unsigned char) (*(&_iob[1])->_ptr++ = (char)__c)
    : _flsbuf (__c, (&_iob[1]));}
# 767 "c:\\program\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t fread (void *, size_t, size_t, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t fwrite (const void *, size_t, size_t, FILE *);



 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fseek (FILE *, long, int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) long ftell (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void rewind (FILE *);
# 821 "c:\\program\\mingw\\include\\stdio.h" 3
typedef union { long long __value; __off64_t __offset; } fpos_t;




 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fgetpos (FILE *, fpos_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fsetpos (FILE *, const fpos_t *);
# 862 "c:\\program\\mingw\\include\\stdio.h" 3
int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __mingw_fseeki64 (FILE *, long long, int);
extern __inline__ __attribute__((__always_inline__)) __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _fseeki64 (FILE *__f, long long __o, int __w)
{ return __mingw_fseeki64 (__f, __o, __w); }


long long __attribute__((__cdecl__)) __attribute__((__nothrow__)) __mingw_ftelli64 (FILE *);
extern __inline__ __attribute__((__always_inline__)) __attribute__((__cdecl__)) long long __attribute__((__nothrow__)) _ftelli64 (FILE *__file )
{ return __mingw_ftelli64 (__file); }





 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int feof (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int ferror (FILE *);





#define feof(__F) ((__F)->_flag & _IOEOF)
#define ferror(__F) ((__F)->_flag & _IOERR)


 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void clearerr (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void perror (const char *);
# 1041 "c:\\program\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fwprintf (FILE *, const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int wprintf (const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int vfwprintf (FILE *, const wchar_t *, __builtin_va_list);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int vwprintf (const wchar_t *, __builtin_va_list);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _snwprintf (wchar_t *, size_t, const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _vscwprintf (const wchar_t *, __builtin_va_list);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _vsnwprintf (wchar_t *, size_t, const wchar_t *, __builtin_va_list);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fwscanf (FILE *, const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int wscanf (const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int swscanf (const wchar_t *, const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t fgetwc (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t fputwc (wchar_t, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t ungetwc (wchar_t, FILE *);
# 1063 "c:\\program\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t * fgetws (wchar_t *, int, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fputws (const wchar_t *, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t getwc (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t getwchar (void);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t putwc (wint_t, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t putwchar (wint_t);
# 1131 "c:\\program\\mingw\\include\\stdio.h" 3

# 2 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 2

# 1 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h" 1
# 38 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
#define HAVE_SPUT_H 
# 47 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
# 1 "c:\\program\\mingw\\include\\stdlib.h" 1 3
# 34 "c:\\program\\mingw\\include\\stdlib.h" 3
       
# 35 "c:\\program\\mingw\\include\\stdlib.h" 3
# 43 "c:\\program\\mingw\\include\\stdlib.h" 3
#define _STDLIB_H 
# 52 "c:\\program\\mingw\\include\\stdlib.h" 3
#define __need_size_t 
#define __need_wchar_t 
#define __need_NULL 
# 1 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 238 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef __need_size_t
# 347 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 401 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 56 "c:\\program\\mingw\\include\\stdlib.h" 2 3





#define RAND_MAX 0x7FFF



#define EXIT_SUCCESS 0
#define EXIT_FAILURE 1
# 90 "c:\\program\\mingw\\include\\stdlib.h" 3

# 141 "c:\\program\\mingw\\include\\stdlib.h" 3
#define MB_CUR_MAX __mb_cur_max
   extern __attribute__((__dllimport__)) int __mb_cur_max;
# 166 "c:\\program\\mingw\\include\\stdlib.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int *_errno(void);
#define errno (*_errno())

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int *__doserrno(void);
#define _doserrno (*__doserrno())
# 335 "c:\\program\\mingw\\include\\stdlib.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int atoi (const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) long atol (const char *);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) double strtod (const char *, char **);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) double atof (const char *);
# 360 "c:\\program\\mingw\\include\\stdlib.h" 3
extern __attribute__((__cdecl__)) __attribute__((__nothrow__))
double __strtod (const char *__restrict__, char **__restrict__);

extern __inline__ __attribute__((__always_inline__)) __attribute__((__cdecl__)) __attribute__((__nothrow__))
double strtod (const char *__restrict__ __nptr, char **__restrict__ __endptr)
{ return __strtod( __nptr, __endptr ); }

extern __inline__ __attribute__((__always_inline__)) __attribute__((__cdecl__)) __attribute__((__nothrow__))
double atof (const char *__nptr) { return __strtod( __nptr, ((void *)0) ); }
# 385 "c:\\program\\mingw\\include\\stdlib.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) long strtol (const char *, char **, int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) unsigned long strtoul (const char *, char **, int);







 __attribute__((__cdecl__)) __attribute__((__nothrow__))
long wcstol (const wchar_t *, wchar_t **, int);

 __attribute__((__cdecl__)) __attribute__((__nothrow__))
unsigned long wcstoul (const wchar_t *, wchar_t **, int);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) double wcstod (const wchar_t *, wchar_t **);
# 451 "c:\\program\\mingw\\include\\stdlib.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *_wgetenv (const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _wputenv (const wchar_t *);

 __attribute__((__cdecl__)) __attribute__((__nothrow__))
void _wsearchenv (const wchar_t *, const wchar_t *, wchar_t *);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _wsystem (const wchar_t *);

 __attribute__((__cdecl__)) __attribute__((__nothrow__))
void _wmakepath (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *,
    const wchar_t *
  );

 __attribute__((__cdecl__)) __attribute__((__nothrow__))
void _wsplitpath (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *);

 __attribute__((__cdecl__)) __attribute__((__nothrow__))
wchar_t *_wfullpath (wchar_t *, const wchar_t *, size_t);





 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t wcstombs (char *, const wchar_t *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int wctomb (char *, wchar_t);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int mblen (const char *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t mbstowcs (wchar_t *, const char *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int mbtowc (wchar_t *, const char *, size_t);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int rand (void);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void srand (unsigned int);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void abort (void) __attribute__((__noreturn__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void exit (int) __attribute__((__noreturn__));



int __attribute__((__cdecl__)) __attribute__((__nothrow__)) atexit (void (*)(void));

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int system (const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *getenv (const char *);
# 502 "c:\\program\\mingw\\include\\stdlib.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *calloc (size_t, size_t) __attribute__((__malloc__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *malloc (size_t) __attribute__((__malloc__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *realloc (void *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void free (void *);
# 514 "c:\\program\\mingw\\include\\stdlib.h" 3
__attribute__((__cdecl__)) __attribute__((__nothrow__)) void *__mingw_realloc (void *, size_t);
__attribute__((__cdecl__)) __attribute__((__nothrow__)) void __mingw_free (void *);






 __attribute__((__cdecl__)) void *bsearch
(const void *, const void *, size_t, size_t, int (*)(const void *, const void *));

 __attribute__((__cdecl__)) void qsort
(void *, size_t, size_t, int (*)(const void *, const void *));

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int abs (int) __attribute__((__const__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) long labs (long) __attribute__((__const__));
# 538 "c:\\program\\mingw\\include\\stdlib.h" 3
typedef struct { int quot, rem; } div_t;
typedef struct { long quot, rem; } ldiv_t;

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) div_t div (int, int) __attribute__((__const__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) ldiv_t ldiv (long, long) __attribute__((__const__));
# 866 "c:\\program\\mingw\\include\\stdlib.h" 3

# 48 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h" 2
# 1 "c:\\program\\mingw\\include\\string.h" 1 3
# 34 "c:\\program\\mingw\\include\\string.h" 3
       
# 35 "c:\\program\\mingw\\include\\string.h" 3
#define _STRING_H 
# 45 "c:\\program\\mingw\\include\\string.h" 3
#define __need_NULL 
#define __need_size_t 






# 1 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 238 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef __need_size_t
# 401 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 54 "c:\\program\\mingw\\include\\string.h" 2 3
# 65 "c:\\program\\mingw\\include\\string.h" 3


#define __STRING_H_SOURCED__ 


 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *memchr (const void *, int, size_t) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int memcmp (const void *, const void *, size_t) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *memcpy (void *, const void *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *memmove (void *, const void *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *memset (void *, int, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strcat (char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strchr (const char *, int) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int strcmp (const char *, const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int strcoll (const char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strcpy (char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t strcspn (const char *, const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strerror (int);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t strlen (const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strncat (char *, const char *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int strncmp (const char *, const char *, size_t) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strncpy (char *, const char *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strpbrk (const char *, const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strrchr (const char *, int) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t strspn (const char *, const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strstr (const char *, const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strtok (char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t strxfrm (char *, const char *, size_t);
# 251 "c:\\program\\mingw\\include\\string.h" 3
#undef __STRING_H_SOURCED__


# 49 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h" 2
# 1 "c:\\program\\mingw\\include\\time.h" 1 3
# 33 "c:\\program\\mingw\\include\\time.h" 3
       
# 34 "c:\\program\\mingw\\include\\time.h" 3
# 43 "c:\\program\\mingw\\include\\time.h" 3
#undef __need_time_h
#define __need_time_t 1
# 1 "c:\\program\\mingw\\include\\sys\\types.h" 1 3
# 34 "c:\\program\\mingw\\include\\sys\\types.h" 3
       
# 35 "c:\\program\\mingw\\include\\sys\\types.h" 3
# 84 "c:\\program\\mingw\\include\\sys\\types.h" 3
#undef __need_off_t
# 108 "c:\\program\\mingw\\include\\sys\\types.h" 3
#undef __need___off64_t
# 132 "c:\\program\\mingw\\include\\sys\\types.h" 3
#undef __need_ssize_t






  typedef long __time32_t;
  typedef long long __time64_t;
# 149 "c:\\program\\mingw\\include\\sys\\types.h" 3
   typedef __time32_t time_t;
# 160 "c:\\program\\mingw\\include\\sys\\types.h" 3
#define __have_typedef_time_t 1


#undef __need_time_t
# 46 "c:\\program\\mingw\\include\\time.h" 2 3






#undef __need_struct_timespec
#undef __need_wchar_decls
# 83 "c:\\program\\mingw\\include\\time.h" 3
#define _TIME_H 
# 94 "c:\\program\\mingw\\include\\time.h" 3
#define CLOCKS_PER_SEC ((clock_t)(1000))
#define CLK_TCK CLOCKS_PER_SEC

#define __need_struct_timespec 1
#define __need_wchar_decls 1
# 115 "c:\\program\\mingw\\include\\time.h" 3
struct timespec
{







  __time64_t tv_sec;
  long tv_nsec;
};
# 149 "c:\\program\\mingw\\include\\time.h" 3
#define __struct_timespec_defined 1
# 175 "c:\\program\\mingw\\include\\time.h" 3
#define __need_NULL 
#define __need_wchar_t 
#define __need_size_t 
# 1 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 238 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef __need_size_t
# 347 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 401 "c:\\program\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 179 "c:\\program\\mingw\\include\\time.h" 2 3




typedef long clock_t;

struct tm
{




  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};



 __attribute__((__cdecl__)) __attribute__((__nothrow__)) clock_t clock (void);
# 214 "c:\\program\\mingw\\include\\time.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) time_t time (time_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) double difftime (time_t, time_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) time_t mktime (struct tm *);
# 228 "c:\\program\\mingw\\include\\time.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *asctime (const struct tm *);





 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *ctime (const time_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) struct tm *gmtime (const time_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) struct tm *localtime (const time_t *);


 __attribute__((__cdecl__)) __attribute__((__nothrow__))
size_t strftime (char *, size_t, const char *, const struct tm *);
# 381 "c:\\program\\mingw\\include\\time.h" 3
extern __attribute__((__dllimport__)) int daylight;
extern __attribute__((__dllimport__)) long timezone;
extern __attribute__((__dllimport__)) char *tzname[2];
# 470 "c:\\program\\mingw\\include\\time.h" 3

# 482 "c:\\program\\mingw\\include\\time.h" 3

# 537 "c:\\program\\mingw\\include\\time.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__))
size_t wcsftime (wchar_t *, size_t, const wchar_t *, const struct tm *);







#undef __need_time_t
#undef __need_struct_timespec
#undef __need_wchar_decls
# 50 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h" 2






#define SPUT_VERSION_MAJOR 1
#define SPUT_VERSION_MINOR 4
#define SPUT_VERSION_PATCH 0
#define SPUT_VERSION_STRING "1.4.0"

#define SPUT_DEFAULT_SUITE_NAME "Unlabeled Suite"
#define SPUT_DEFAULT_CHECK_NAME "Unlabeled Check"

#define SPUT_INITIALIZED 0x06







# 71 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
static struct sput
{
   FILE *out;
   char initialized;

   struct sput_overall
   {
      unsigned long checks;
      unsigned long suites;
      unsigned long ok;
      unsigned long nok;
   } overall;

   struct sput_suite
   {
      const char *name;
      unsigned long nr;
      unsigned long checks;
      unsigned long ok;
      unsigned long nok;
   } suite;

   struct sput_test
   {
      const char *name;
      unsigned long nr;
   } test;

   struct sput_check
   {
      const char *name;
      const char *cond;
      const char *type;
      unsigned long line;
   } check;

   struct sput_time
   {
      time_t start;
      time_t end;
   } time;
} __sput;






#define _sput_die_unless_initialized() if (__sput.initialized != SPUT_INITIALIZED) { fputs("sput_start_testing() omitted\n", stderr); exit(EXIT_FAILURE); }







#define _sput_die_unless_suite_set() if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(EXIT_FAILURE); }







#define _sput_die_unless_test_set() if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(EXIT_FAILURE); }







#define _sput_check_failed() { _sput_die_unless_initialized(); _sput_die_unless_suite_set(); __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }
# 159 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
#define _sput_check_succeeded() { _sput_die_unless_initialized(); _sput_die_unless_suite_set(); __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }
# 177 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
#define sput_start_testing() do { memset(&__sput, 0, sizeof(__sput)); __sput.out = stdout; __sput.time.start = time(NULL); __sput.initialized = SPUT_INITIALIZED; } while (0)
# 186 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
#define sput_leave_suite() do { float failpls = 0.0f; _sput_die_unless_initialized(); _sput_die_unless_suite_set(); failpls = __sput.suite.checks ? (float) ((__sput.suite.nok * 100.0) / __sput.suite.checks) : 0.0f; fprintf(__sput.out, "\n--> %lu check(s), %lu ok, %lu failed (%.2f%%)\n", __sput.suite.checks, __sput.suite.ok, __sput.suite.nok, failpls); __sput.overall.checks += __sput.suite.checks; __sput.overall.ok += __sput.suite.ok; __sput.overall.nok += __sput.suite.nok; memset(&__sput.suite, 0, sizeof(__sput.suite)); } while (0)
# 205 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
#define sput_get_return_value() (__sput.overall.nok > 0 ? EXIT_FAILURE : EXIT_SUCCESS)



#define sput_enter_suite(_name) do { _sput_die_unless_initialized(); if (__sput.suite.name) { sput_leave_suite(); } __sput.suite.name = _name != NULL ? _name : SPUT_DEFAULT_SUITE_NAME; __sput.suite.nr = ++__sput.overall.suites; fprintf(__sput.out, "\n== Entering suite #%lu, \"%s\" ==\n\n", __sput.suite.nr, __sput.suite.name); } while (0)
# 224 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
#define sput_finish_testing() do { float failpft = 0.0f; _sput_die_unless_initialized(); if (__sput.suite.name) { sput_leave_suite(); } failpft = __sput.overall.checks ? (float) ((__sput.overall.nok * 100.0) / __sput.overall.checks) : 0.0f; __sput.time.end = time(NULL); fprintf(__sput.out, "\n==> %lu check(s) in %lu suite(s) finished after %.2f " "second(s),\n" "    %lu succeeded, %lu failed (%.2f%%)\n" "\n[%s]\n", __sput.overall.checks, __sput.overall.suites, difftime(__sput.time.end, __sput.time.start), __sput.overall.ok, __sput.overall.nok, failpft, (sput_get_return_value() == EXIT_SUCCESS) ? "SUCCESS" : "FAILURE"); } while (0)
# 249 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
#define sput_set_output_stream(_fp) do { __sput.out = _fp != NULL ? _fp : stdout; } while (0)





#define sput_fail_if(_cond,_name) do { _sput_die_unless_initialized(); _sput_die_unless_suite_set(); _sput_die_unless_test_set(); __sput.check.name = _name != NULL ? _name : SPUT_DEFAULT_CHECK_NAME; __sput.check.line = __LINE__; __sput.check.cond = #_cond; __sput.check.type = "fail-if"; __sput.test.nr++; __sput.suite.checks++; if ((_cond)) { _sput_check_failed(); } else { _sput_check_succeeded(); } } while (0)
# 278 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
#define sput_fail_unless(_cond,_name) do { _sput_die_unless_initialized(); _sput_die_unless_suite_set(); _sput_die_unless_test_set(); __sput.check.name = _name != NULL ? _name : SPUT_DEFAULT_CHECK_NAME; __sput.check.line = __LINE__; __sput.check.cond = #_cond; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (_cond)) { _sput_check_failed(); } else { _sput_check_succeeded(); } } while (0)
# 301 "c:\\users\\president\\desktop\\sbx\\input\\src\\os_base\\os_sput.h"
#define sput_run_test(_func) do { _sput_die_unless_initialized(); _sput_die_unless_suite_set(); memset(&__sput.test, 0, sizeof(__sput.test)); __sput.test.name = #_func; _func(); } while (0)
# 4 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 2
# 13 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
static int count_vowels(const char *s)
{
   const char *cp = s;
   int count = 0;

   while (*cp)
   {
      if (*cp == 'a' || *cp == 'e' || *cp == 'i' ||
            *cp == 'o' || *cp == 'u')
      {
         count++;
      }

      cp++;
   }

   return count;
}


static void test_vowels_present()
{
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.check.name = "book == 2v" != 
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "book == 2v" : "Unlabeled Check"; __sput.check.line = 35; __sput.check.cond = "count_vowels(\"book\") == 2"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("book") == 2)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 35 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.check.name = "hand == 1v" != 
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "hand == 1v" : "Unlabeled Check"; __sput.check.line = 36; __sput.check.cond = "count_vowels(\"hand\") == 1"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("hand") == 1)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 36 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.check.name = "test == 1v" != 
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "test == 1v" : "Unlabeled Check"; __sput.check.line = 37; __sput.check.cond = "count_vowels(\"test\") == 1"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("test") == 1)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 37 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.check.name = "Peter == 2v" != 
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "Peter == 2v" : "Unlabeled Check"; __sput.check.line = 38; __sput.check.cond = "count_vowels(\"Peter\") == 2"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("Peter") == 2)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 38 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.check.name = "Apu == 2v" != 
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "Apu == 2v" : "Unlabeled Check"; __sput.check.line = 39; __sput.check.cond = "count_vowels(\"Apu\") == 2"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("Apu") == 2)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 39 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
}


static void test_no_vowels_present()
{
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.check.name = "GCC == 0v" != 
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "GCC == 0v" : "Unlabeled Check"; __sput.check.line = 45; __sput.check.cond = "count_vowels(\"GCC\") == 0"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("GCC") == 0)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 45 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.check.name = "BBC == 0v" != 
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "BBC == 0v" : "Unlabeled Check"; __sput.check.line = 46; __sput.check.cond = "count_vowels(\"BBC\") == 0"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("BBC") == 0)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 46 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.check.name = "CNN == 0v" != 
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "CNN == 0v" : "Unlabeled Check"; __sput.check.line = 47; __sput.check.cond = "count_vowels(\"CNN\") == 0"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("CNN") == 0)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 47 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.check.name = "GPS == 0v" != 
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "GPS == 0v" : "Unlabeled Check"; __sput.check.line = 48; __sput.check.cond = "count_vowels(\"GPS\") == 0"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("GPS") == 0)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 48 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.test.name) { fputs("sput_run_test() omitted\n", __sput.out); exit(
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.check.name = "Ltd == 0v" != 
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "Ltd == 0v" : "Unlabeled Check"; __sput.check.line = 49; __sput.check.cond = "count_vowels(\"Ltd\") == 0"; __sput.check.type = "fail-unless"; __sput.test.nr++; __sput.suite.checks++; if (! (count_vowels("Ltd") == 0)) { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.nok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  FAIL\n" "!    Type:      %s\n" "!    Condition: %s\n" "!    Line:      %lu\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name, __sput.check.type, __sput.check.cond, __sput.check.line); }; } else { { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 49 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; __sput.suite.ok++; fprintf(__sput.out, "[%lu:%lu]  %s:#%lu  \"%s\"  pass\n", __sput.suite.nr, __sput.suite.checks, __sput.test.name, __sput.test.nr, __sput.check.name); }; } } while (0);
}


int main(int argc, char *argv[])
{
   do { memset(&__sput, 0, sizeof(__sput)); __sput.out = 
# 55 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[1])
# 55 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ; __sput.time.start = time(
# 55 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0)
# 55 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); __sput.initialized = 0x06; } while (0);

   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (__sput.suite.name) { do { float failpls = 0.0f; if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; failpls = __sput.suite.checks ? (float) ((__sput.suite.nok * 100.0) / __sput.suite.checks) : 0.0f; fprintf(__sput.out, "\n--> %lu check(s), %lu ok, %lu failed (%.2f%%)\n", __sput.suite.checks, __sput.suite.ok, __sput.suite.nok, failpls); __sput.overall.checks += __sput.suite.checks; __sput.overall.ok += __sput.suite.ok; __sput.overall.nok += __sput.suite.nok; memset(&__sput.suite, 0, sizeof(__sput.suite)); } while (0); } __sput.suite.name = "count_vowels(): Vowels Present" != 
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 57 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "count_vowels(): Vowels Present" : "Unlabeled Suite"; __sput.suite.nr = ++__sput.overall.suites; fprintf(__sput.out, "\n== Entering suite #%lu, \"%s\" ==\n\n", __sput.suite.nr, __sput.suite.name); } while (0);
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 58 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 58 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 58 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 58 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 58 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 58 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; memset(&__sput.test, 0, sizeof(__sput.test)); __sput.test.name = "test_vowels_present"; test_vowels_present(); } while (0);

   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (__sput.suite.name) { do { float failpls = 0.0f; if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; failpls = __sput.suite.checks ? (float) ((__sput.suite.nok * 100.0) / __sput.suite.checks) : 0.0f; fprintf(__sput.out, "\n--> %lu check(s), %lu ok, %lu failed (%.2f%%)\n", __sput.suite.checks, __sput.suite.ok, __sput.suite.nok, failpls); __sput.overall.checks += __sput.suite.checks; __sput.overall.ok += __sput.suite.ok; __sput.overall.nok += __sput.suite.nok; memset(&__sput.suite, 0, sizeof(__sput.suite)); } while (0); } __sput.suite.name = "count_vowels(): No Vowels Present" != 
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0) 
# 60 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ? "count_vowels(): No Vowels Present" : "Unlabeled Suite"; __sput.suite.nr = ++__sput.overall.suites; fprintf(__sput.out, "\n== Entering suite #%lu, \"%s\" ==\n\n", __sput.suite.nr, __sput.suite.name); } while (0);
   do { if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 61 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 61 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 61 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 61 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 61 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 61 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; memset(&__sput.test, 0, sizeof(__sput.test)); __sput.test.name = "test_no_vowels_present"; test_no_vowels_present(); } while (0);

   do { float failpft = 0.0f; if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (__sput.suite.name) { do { float failpls = 0.0f; if (__sput.initialized != 0x06) { fputs("sput_start_testing() omitted\n", 
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  (&_iob[2])
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); exit(
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; if (! __sput.suite.name) { fputs("sput_enter_suite() omitted\n", __sput.out); exit(
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); }; failpls = __sput.suite.checks ? (float) ((__sput.suite.nok * 100.0) / __sput.suite.checks) : 0.0f; fprintf(__sput.out, "\n--> %lu check(s), %lu ok, %lu failed (%.2f%%)\n", __sput.suite.checks, __sput.suite.ok, __sput.suite.nok, failpls); __sput.overall.checks += __sput.suite.checks; __sput.overall.ok += __sput.suite.ok; __sput.overall.nok += __sput.suite.nok; memset(&__sput.suite, 0, sizeof(__sput.suite)); } while (0); } failpft = __sput.overall.checks ? (float) ((__sput.overall.nok * 100.0) / __sput.overall.checks) : 0.0f; __sput.time.end = time(
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3 4
  ((void *)0)
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ); fprintf(__sput.out, "\n==> %lu check(s) in %lu suite(s) finished after %.2f " "second(s),\n" "    %lu succeeded, %lu failed (%.2f%%)\n" "\n[%s]\n", __sput.overall.checks, __sput.overall.suites, difftime(__sput.time.end, __sput.time.start), __sput.overall.ok, __sput.overall.nok, failpft, ((__sput.overall.nok > 0 ? 
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  1 
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  : 
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  0
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ) == 
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
  0
# 63 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
  ) ? "SUCCESS" : "FAILURE"); } while (0);

   return (__sput.overall.nok > 0 ? 
# 65 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
         1 
# 65 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
         : 
# 65 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c" 3
         0
# 65 "C:\\Users\\president\\Desktop\\sbx\\input\\src\\os_sim\\lld_ram_test.c"
         );
}
